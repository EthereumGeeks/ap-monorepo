{
  "address": "0xAC68a00bB798C3923210909244Eb900E76D4726A",
  "abi": [
    {
      "inputs": [],
      "name": "MAX_CYCLE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EVENT_SCHEDULE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_POINT_ZERO",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "eomc",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "enum S",
              "name": "s",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IPS",
          "name": "cycle",
          "type": "tuple"
        }
      ],
      "name": "adjustEndOfMonthConvention",
      "outputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "bdc",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "computeEventTimeForEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        }
      ],
      "name": "computeInitialState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "lastScheduleTime",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeNextCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "lastNonCyclicEvent",
          "type": "bytes32"
        }
      ],
      "name": "computeNextNonCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        }
      ],
      "name": "computeNonCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "externalData",
          "type": "bytes32"
        }
      ],
      "name": "computePayoffForEvent",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "externalData",
          "type": "bytes32"
        }
      ],
      "name": "computeStateForEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractType",
      "outputs": [
        {
          "internalType": "enum ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "isEventScheduled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftCalcTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e5842d110070169d02fe2d2c389862839b01100804bdbe08e981e0e72e7733a",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xAC68a00bB798C3923210909244Eb900E76D4726A",
    "transactionIndex": 0,
    "gasUsed": "3793180",
    "logsBloom": "0x
    "blockHash": "0x3341e33e17c830037e748f7a9aee604b44ce516b2f2b49fcbd2181f231cc73ba",
    "transactionHash": "0x4e5842d110070169d02fe2d2c389862839b01100804bdbe08e981e0e72e7733a",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3793180",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7d6b29d6a2c9dde4fae67ffdf428231d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_CYCLE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EVENT_SCHEDULE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_POINT_ZERO\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"eomc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycle\",\"type\":\"tuple\"}],\"name\":\"adjustEndOfMonthConvention\",\"outputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"bdc\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"computeEventTimeForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"computeInitialState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastScheduleTime\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeNextCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"lastNonCyclicEvent\",\"type\":\"bytes32\"}],\"name\":\"computeNextNonCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"}],\"name\":\"computeNonCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"externalData\",\"type\":\"bytes32\"}],\"name\":\"computePayoffForEvent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"externalData\",\"type\":\"bytes32\"}],\"name\":\"computeStateForEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"isEventScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftCalcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All numbers except unix timestamp are represented as multiple of 10 ** 18\",\"kind\":\"dev\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"details\":\"The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\",\"params\":{\"cycle\":\"the cycle struct\",\"eomc\":\"the end of month convention to adjust\",\"startTime\":\"timestamp of the cycle start\"},\"returns\":{\"_0\":\"the adjusted end of month convention\"}},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"segmentEnd\":\"end timestamp of the segement\",\"segmentStart\":\"start timestamp of the segment\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"details\":\"For optimization reasons not located in EventUtil by applying the BDC specified in the terms\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"params\":{\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the initial state of the contract\"}},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"lastScheduleTime\":\"last occurrence of cyclic event\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"details\":\"Assumes that non-cyclic events of the same event type have a unique schedule time\",\"params\":{\"lastNonCyclicEvent\":\"last non-cyclic event\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"next non-cyclic event\"}},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"params\":{\"segmentEnd\":\"end timestamp of the segement\",\"segmentStart\":\"start timestamp of the segment\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"segment of the non-cyclic schedule\"}},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"params\":{\"_event\":\"event for which the payoff should be evaluated\",\"externalData\":\"external data needed for POF evaluation (e.g. fxRate)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the payoff of the event\"}},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"params\":{\"_event\":\"event to be applied to the contract state\",\"externalData\":\"external data needed for STF evaluation (e.g. rate for RR events)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the resulting contract state\"}},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"returns\":{\"_0\":\"boolean indicating whether event is still scheduled\"}}},\"title\":\"PAMEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"notice\":\"This function makes an adjustment on the end of month convention.\"},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"notice\":\"Returns the event time for a given schedule time\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"notice\":\"Initialize contract state space based on the contract terms.\"},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"notice\":\"Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured.\"},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"notice\":\"Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps.\"},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"notice\":\"Evaluates the payoff for an event under the current state of the contract.\"},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"notice\":\"Applys an event to the current state of a contract and returns the resulting contract state.\"},\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"notice\":\"Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract param state current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)\"},\"shiftCalcTime(uint256,uint8,uint8,uint256)\":{\"notice\":\"Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\"}},\"notice\":\"Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a PAM contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ACTUS/Engines/PAM/PAMEngine.sol\":\"PAMEngine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\nenum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 delinquencyRate;\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    // int256 priceAtTerminationDate; // not implemented\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0x7d1d3eb79a6d42c6228bbc617b518fec7370fd884f4b5da0f52c61b499160e86\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/BusinessDayConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title BusinessDayConventions\\n * @notice Contains conventions of how to handle non-business days when generating schedules of events.\\n * The events schedule time can be shifted or not, if shifted it is possible that it is shifted to the next\\n * or previous valid business days, etc.\\n */\\ncontract BusinessDayConventions {\\n\\n    /**\\n     * @notice Used in POFs and STFs for DCFs.\\n     * No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\\n     */\\n    function shiftCalcTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (\\n            convention == BusinessDayConvention.CSF ||\\n            convention == BusinessDayConvention.CSMF ||\\n            convention == BusinessDayConvention.CSP ||\\n            convention == BusinessDayConvention.CSMP\\n        ) {\\n            return timestamp;\\n        }\\n\\n        return shiftEventTime(timestamp, convention, calendar, maturityDate);\\n    }\\n\\n    /*\\n     * @notice Used for generating event schedules (for single events and event cycles schedules).\\n     * This convention assumes that when shifting the events schedule time according\\n     * to a BDC, the time is shifted first and calculations are performed thereafter.\\n     * (Calculations in POFs and STFs are based on the shifted time as well)\\n     */\\n    function shiftEventTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // do not shift if equal to maturity date\\n        if (timestamp == maturityDate) return timestamp;\\n\\n        // Shift/Calc Following, Calc/Shift following\\n        if (convention == BusinessDayConvention.SCF || convention == BusinessDayConvention.CSF) {\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        // Shift/Calc Modified Following, Calc/Shift Modified following\\n        // Same as unmodified if shifted date is in the same month, if not it returns the previous buiness-day\\n        } else if (convention == BusinessDayConvention.SCMF || convention == BusinessDayConvention.CSMF) {\\n            uint256 followingOrSameBusinessDay = getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(followingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return followingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Preceeding, Calc/Shift Preceeding\\n        } else if (convention == BusinessDayConvention.SCP || convention == BusinessDayConvention.CSP) {\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Modified Preceeding, Calc/Shift Modified Preceeding\\n        // Same as unmodified if shifted date is in the same month, if not it returns the following buiness-day\\n        } else if (convention == BusinessDayConvention.SCMP || convention == BusinessDayConvention.CSMP) {\\n            uint256 preceedingOrSameBusinessDay = getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(preceedingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return preceedingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        }\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the following business day if a non-business day is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrFollowing(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 2);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 1);\\n            }\\n        }\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the previous buiness day if a non-businessday is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrPreceeding(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 1);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 2);\\n            }\\n        }\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1406e47e0631852d7cab09816927778609dd56893df469ecc7a492bb8b45aa67\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/ContractRoleConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title ContractRoleConventions\\n */\\ncontract ContractRoleConventions {\\n\\n    /**\\n     * Returns the role sign for a given Contract Role.\\n     */\\n    function roleSign(ContractRole contractRole)\\n        internal\\n        pure\\n        returns (int8)\\n    {\\n        if (contractRole == ContractRole.RPA) return 1;\\n        if (contractRole == ContractRole.RPL) return -1;\\n\\n        if (contractRole == ContractRole.BUY) return 1;\\n        if (contractRole == ContractRole.SEL) return -1;\\n\\n        if (contractRole == ContractRole.RFL) return 1;\\n        if (contractRole == ContractRole.PFL) return -1;\\n\\n        revert(\\\"ContractRoleConvention.roleSign: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9a875b4c55500a23f8ac6bc854cb0f7bbc679f76127bf22e8a09410582641cc\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/DayCountConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../SignedMath.sol\\\";\\n\\n\\n/**\\n * @title DayCountConventions\\n * @notice Implements various ISDA day count conventions as specified by ACTUS\\n */\\ncontract DayCountConventions {\\n\\n    using SafeMath for uint;\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n    /**\\n     * Returns the fraction of the year between two timestamps.\\n     */\\n    function yearFraction(\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        DayCountConvention ipdc,\\n        uint256 maturityDate\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(endTimestamp >= startTimestamp, \\\"Core.yearFraction: START_NOT_BEFORE_END\\\");\\n        if (ipdc == DayCountConvention.AA) {\\n            return actualActual(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A360) {\\n            return actualThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A365) {\\n            return actualThreeSixtyFive(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360) {\\n            return thirtyEThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360ISDA) {\\n            return thirtyEThreeSixtyISDA(startTimestamp, endTimestamp, maturityDate);\\n        } else if (ipdc == DayCountConvention._28E336) {\\n            // not implemented yet\\n            revert(\\\"DayCountConvention.yearFraction: ATTRIBUTE_NOT_SUPPORTED.\\\");\\n        } else {\\n            revert(\\\"DayCountConvention.yearFraction: ATTRIBUTE_NOT_FOUND.\\\");\\n        }\\n    }\\n\\n    /**\\n     * ISDA A/A day count convention\\n     */\\n    function actualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 366 : 365;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffDays(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 366 : 365;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n\\n    /**\\n     * ISDA A/360 day count convention\\n     */\\n    function actualThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA A/365-Fixed day count convention\\n     */\\n    function actualThreeSixtyFive(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(365));\\n    }\\n\\n    /**\\n     * ISDA 30E/360 day count convention\\n     */\\n    function thirtyEThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == 31) {\\n            d1Day = 30;\\n        }\\n\\n        if (d2Day == 31) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA 30E/360-ISDA day count convention\\n     */\\n    function thirtyEThreeSixtyISDA(uint256 startTime, uint256 endTime, uint256 maturityDate)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)) {\\n            d1Day = 30;\\n        }\\n\\n        if (!(endTime == maturityDate && d2Month == 2) && d2Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(endTime)) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n}\",\"keccak256\":\"0x1e5e71208d4b8a20b52ac226926a2dfaa1eb128b69694a3db2767f0c0d724bef\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/EndOfMonthConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title EndOfMonthConventions\\n * @notice Implements the ACTUS end of month convention.\\n */\\ncontract EndOfMonthConventions {\\n\\n    /**\\n     * This function makes an adjustment on the end of month convention.\\n     * @dev The following is considered to dertermine if schedule dates are shifted to the end of month:\\n     * - The convention SD (same day) means not adjusting, EM (end of month) means adjusting\\n     * - Dates are only shifted if the schedule start date is an end-of-month date\\n     * - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\\n     * @param eomc the end of month convention to adjust\\n     * @param startTime timestamp of the cycle start\\n     * @param cycle the cycle struct\\n     * @return the adjusted end of month convention\\n     */\\n    function adjustEndOfMonthConvention(\\n        EndOfMonthConvention eomc,\\n        uint256 startTime,\\n        IPS memory cycle\\n    )\\n        public\\n        pure\\n        returns (EndOfMonthConvention)\\n    {\\n        if (eomc == EndOfMonthConvention.EOM) {\\n            // check if startTime is last day in month and schedule has month based period\\n            // otherwise switch to SD convention\\n            if (\\n                BokkyPooBahsDateTimeLibrary.getDay(startTime) == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime) &&\\n                (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n            ) {\\n                return EndOfMonthConvention.EOM;\\n            }\\n            return EndOfMonthConvention.SD;\\n        } else if (eomc == EndOfMonthConvention.SD) {\\n            return EndOfMonthConvention.SD;\\n        }\\n        revert(\\\"EndOfMonthConvention.adjustEndOfMonthConvention: ATTRIBUTE_NOT_FOUND.\\\");\\n    }\\n\\n    /**\\n\\t * This function is for the EndOfMonthConvention.EOM convention and\\n\\t * shifts a timestamp to the last day of the month.\\n\\t * @param timestamp the timestmap to shift\\n\\t * @return the shifted timestamp\\n\\t */\\n\\tfunction shiftEndOfMonth(uint256 timestamp)\\n\\t  internal\\n\\t  pure\\n\\t  returns (uint256)\\n\\t{\\n        // // check if startTime is last day in month and schedule has month based period\\n        // // otherwise switch to SD convention\\n        // if (\\n        //     eomc != EndOfMonthConvention.EOM\\n        //     || BokkyPooBahsDateTimeLibrary.getDay(startTime) != BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)\\n        //     || (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n        // ) {\\n        //     // SD\\n        //     return timestamp;\\n        // }\\n\\n\\t\\tuint256 year;\\n\\t\\tuint256 month;\\n\\t\\tuint256 day;\\n\\t\\t(year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n\\t\\tuint256 lastDayOfMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n\\n\\t\\treturn BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, lastDayOfMonth);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdf4d28ba01767a6e737bdcf2e8e9e08143f9cd08a6d62ed90780031c4811876f\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Core.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ACTUSTypes.sol\\\";\\r\\nimport \\\"./ACTUSConstants.sol\\\";\\r\\nimport \\\"./Utils/Utils.sol\\\";\\r\\nimport \\\"./Conventions/BusinessDayConventions.sol\\\";\\r\\nimport \\\"./Conventions/ContractRoleConventions.sol\\\";\\r\\nimport \\\"./Conventions/DayCountConventions.sol\\\";\\r\\nimport \\\"./Conventions/EndOfMonthConventions.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Core\\r\\n * @notice Contains all type definitions, conventions as specified by the ACTUS Standard\\r\\n * and utility methods for generating event schedules\\r\\n */\\r\\ncontract Core is\\r\\n    ACTUSConstants,\\r\\n    ContractRoleConventions,\\r\\n    DayCountConventions,\\r\\n    EndOfMonthConventions,\\r\\n    Utils\\r\\n{}\\r\\n\",\"keccak256\":\"0x4f0be10497e1c0e5facce3686a8454bed5989ce9cc440e8438057f07ff5c04f8\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/SignedMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * Advanced math library for signed integers\\n * (including floats which are represented as multiples of 10 ** 18)\\n */\\nlibrary SignedMath {\\n\\n    int256 constant private INT256_MIN = -2 ** 255;\\n\\n    uint256 constant public PRECISION = 18;\\n    uint256 constant public MULTIPLICATOR = 10 ** PRECISION;\\n\\n\\n    /**\\n     * @dev The product of a and b has to be less than INT256_MAX (~10 ** 76),\\n     * as devision (normalization) is performed after multiplication\\n     * Upper boundary would be (10 ** 58) * (MULTIPLICATOR) == ~10 ** 76\\n     */\\n    function floatMult(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (a == 0 || b == 0) return 0;\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n\\n        // normalize (divide by MULTIPLICATOR)\\n        int256 d = c / int256(MULTIPLICATOR);\\n        require(d != 0, \\\"SignedMath.floatMult: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    function floatDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(b != 0, \\\"SignedMath.floatDiv: DIVIDED_BY_ZERO\\\");\\n\\n        // normalize (multiply by MULTIPLICATOR)\\n        if (a == 0) return 0;\\n        int256 c = a * int256(MULTIPLICATOR);\\n        require(c / a == int256(MULTIPLICATOR), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n        int256 d = c / b;\\n        require(d != 0, \\\"SignedMath.floatDiv: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    /**\\n        * @dev Returns the smallest of two signed numbers.\\n        */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n            return a <= b ? a : b;\\n    }\\n\\n    /**\\n        * @dev Returns the largest of two signed numbers.\\n        */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n            return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x884bb3aec6597cb12c2ce3417ec60a1ffc82970342eefde5b195fad728efa233\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/CycleUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../ACTUSConstants.sol\\\";\\nimport \\\"../Conventions/EndOfMonthConventions.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\n\\n\\n/**\\n * @title Schedule\\n * @notice Methods related to generating event schedules.\\n */\\ncontract CycleUtils is ACTUSConstants, EndOfMonthConventions, PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies the cycle n - times (n := cycleIndex) to a given date\\n     */\\n    function getNextCycleDate(IPS memory cycle, uint256 cycleStart, uint256 cycleIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (cycle.p == P.D) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.W) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(7).mul(cycleIndex));\\n        } else if (cycle.p == P.M) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.Q) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(3).mul(cycleIndex));\\n        } else if (cycle.p == P.H) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(6).mul(cycleIndex));\\n        } else if (cycle.p == P.Y) {\\n            newTimestamp = cycleStart.addYears(cycle.i.mul(cycleIndex));\\n        } else {\\n            revert(\\\"Schedule.getNextCycleDate: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n\\n    /**\\n     * Computes an array of timestamps that represent dates in a cycle falling within a given segment.\\n     * @dev There are some notable edge cases: If the cycle is \\\"not set\\\" we return the start end end dates\\n     * of the cycle if they lie within the segment. Otherwise and empty array is returned.\\n     * @param cycleStart start time of the cycle\\n     * @param cycleEnd end time of the cycle\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param segmentStart start time of the segment\\n     * @param segmentEnd end time of the segment\\n     * @return an array of timestamps from the given cycle that fall within the specified segement\\n     */\\n    function computeDatesFromCycleSegment(\\n        uint256 cycleStart,\\n        uint256 cycleEnd,\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        bool addEndDate,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256[MAX_CYCLE_SIZE] memory)\\n    {\\n        uint256[MAX_CYCLE_SIZE] memory dates;\\n        uint256 index;\\n\\n        // if the cycle is not set we return only the cycle start end end dates under these conditions:\\n        // we return the cycle start, if it's in the segment\\n        // in case of addEntTime = true, the cycle end is also returned if in the segment\\n        if (cycle.isSet == false) {\\n            if (isInSegment(cycleStart, segmentStart, segmentEnd)) {\\n                dates[index] = cycleStart;\\n                index++;\\n            }\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                if (addEndDate == true) dates[index] = cycleEnd;\\n            }\\n            return dates;\\n        }\\n\\n        uint256 date = cycleStart;\\n        uint256 cycleIndex;\\n\\n        EndOfMonthConvention actualEOMC = adjustEndOfMonthConvention(eomc, cycleStart, cycle);\\n\\n        // walk through the cycle and create the cycle dates to be returned\\n        while (date < cycleEnd) {\\n            // if date is in segment and MAX_CYCLE_SIZE is not reached add it to the output array\\n            if (isInSegment(date, segmentStart, segmentEnd)) {\\n                require(index < (MAX_CYCLE_SIZE - 2), \\\"Schedule.computeDatesFromCycle: MAX_CYCLE_SIZE\\\");\\n                dates[index] = date;\\n                index++;\\n            }\\n\\n            cycleIndex++;\\n\\n            date = (actualEOMC == EndOfMonthConvention.EOM)\\n                ? shiftEndOfMonth(getNextCycleDate(cycle, cycleStart, cycleIndex))\\n                : getNextCycleDate(cycle, cycleStart, cycleIndex);\\n        }\\n\\n        // add additional time at the end if addEndDate\\n        if (addEndDate == true) {\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                dates[index] = cycleEnd;\\n            }\\n        }\\n\\n        // handle a special case where S is set to LONG (e.g. for trimming a cycle to the maturity date)\\n        if (index > 0 && isInSegment(dates[index - 1], segmentStart, segmentEnd)) {\\n            if (cycle.s == S.LONG && index > 1 && cycleEnd != date) {\\n                dates[index - 1] = dates[index];\\n                delete dates[index];\\n            }\\n        }\\n\\n        return dates;\\n    }\\n\\n    /**\\n     * Computes the next date for a given an IPS cycle.\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param anchorDate anchor date of the cycle\\n     * @param precedingDate the previous date of the cycle\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param cycleEnd end date of the cyclic schedule\\n     * @return next date of the cycle\\n     */\\n    function computeNextCycleDateFromPrecedingDate(\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        uint256 anchorDate,\\n        uint256 precedingDate,\\n        bool addEndDate,\\n        uint256 cycleEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (cycle.isSet == false || precedingDate == 0) return anchorDate;\\n\\n        uint256 nextCyclicDate = (adjustEndOfMonthConvention(eomc, anchorDate, cycle) == EndOfMonthConvention.EOM)\\n            ? shiftEndOfMonth(getNextCycleDate(cycle, precedingDate, 1))\\n            : getNextCycleDate(cycle, precedingDate, 1);\\n\\n        if (addEndDate && cycleEnd != 0) {\\n            // handle infinite loop (since preceding date is cycleEnd)\\n            if (precedingDate == cycleEnd) return 0;\\n            // add occurence at cycle end if date is greater than cycle end\\n            if (nextCyclicDate > cycleEnd) return cycleEnd;\\n        }\\n        // remove occurence if it is one cycle end\\n        if (addEndDate == false && cycleEnd != 0 && nextCyclicDate == cycleEnd) return 0;\\n\\n        return nextCyclicDate;\\n    }\\n\\n    /*\\n     * @notice Checks if a timestamp is in a given range.\\n     */\\n    function isInSegment(\\n        uint256 timestamp,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (startTimestamp > endTimestamp) return false;\\n        if (startTimestamp <= timestamp && timestamp <= endTimestamp) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x64b35c944c20202d1e93a19e2dda71e820f32904a5dba6a2a0d0270eb41b8d99\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/PeriodUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title PeriodUtils\\n * @notice Utility methods for dealing with Periods\\n */\\ncontract PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies a period in IP notation to a given timestamp\\n     */\\n    function getTimestampPlusPeriod(IP memory period, uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (period.p == P.D) {\\n            newTimestamp = timestamp.addDays(period.i);\\n        } else if (period.p == P.W) {\\n            newTimestamp = timestamp.addDays(period.i.mul(7));\\n        } else if (period.p == P.M) {\\n            newTimestamp = timestamp.addMonths(period.i);\\n        } else if (period.p == P.Q) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(3));\\n        } else if (period.p == P.H) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(6));\\n        } else if (period.p == P.Y) {\\n            newTimestamp = timestamp.addYears(period.i);\\n        } else {\\n            revert(\\\"PeriodUtils.getTimestampPlusPeriod: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba86e98c89c11d4b16bb7cf81339679e01c7a73d099a980e71335bb890e82d9\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/Utils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../Conventions/BusinessDayConventions.sol\\\";\\n\\nimport \\\"./EventUtils.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\nimport \\\"./CycleUtils.sol\\\";\\n\\n\\n/**\\n * @title Utils\\n * @notice Utility methods used throughout Core and all Engines\\n */\\ncontract Utils is BusinessDayConventions, EventUtils, PeriodUtils, CycleUtils {\\n\\n    /**\\n     * @notice Returns the event time for a given schedule time\\n     * @dev For optimization reasons not located in EventUtil\\n     * by applying the BDC specified in the terms\\n     */\\n    function computeEventTimeForEvent(bytes32 _event, BusinessDayConvention bdc, Calendar calendar, uint256 maturityDate)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        (, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // handle maturity date\\n        return shiftEventTime(scheduleTime, bdc, calendar, maturityDate);\\n    }\\n}\\n\",\"keccak256\":\"0x0ab55d9aea5c5ba13eb25b08ec98afa1f48693644022c58b0f212dddcbc8a2a4\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/PAM/IPAMEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface IPAMEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(PAMTerms calldata terms)\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        PAMTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        PAMTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bool hasUnderlying,\\n        State calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d388424da8a428ff40b6417e779d62c6f51e485c5ec699900c57b4b11e5a007\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/PAM/PAMEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\nimport \\\"./IPAMEngine.sol\\\";\\nimport \\\"./PAMSTF.sol\\\";\\nimport \\\"./PAMPOF.sol\\\";\\n\\n\\n/**\\n * @title PAMEngine\\n * @notice Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a PAM contract\\n * @dev All numbers except unix timestamp are represented as multiple of 10 ** 18\\n */\\ncontract PAMEngine is Core, PAMSTF, PAMPOF, IPAMEngine {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    function contractType() external pure override returns (ContractType) {\\n        return ContractType.PAM;\\n    }\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (State memory)\\n    {\\n        return stateTransitionFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (int256)\\n    {\\n        // if alternative settlementCurrency is set then apply fxRate to payoff\\n        if (terms.settlementCurrency != address(0) && terms.currency != terms.settlementCurrency) {\\n            return payoffFunction(\\n                terms,\\n                state,\\n                _event,\\n                externalData\\n            ).floatMult(int256(externalData));\\n        }\\n\\n        return payoffFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return the initial state of the contract\\n     */\\n    function computeInitialState(PAMTerms calldata terms)\\n        external\\n        pure\\n        override\\n        returns (State memory)\\n    {\\n        State memory state;\\n\\n        state.contractPerformance = ContractPerformance.PF;\\n        state.notionalScalingMultiplier = ONE_POINT_ZERO;\\n        state.interestScalingMultiplier = ONE_POINT_ZERO;\\n        state.statusDate = terms.statusDate;\\n        state.maturityDate = terms.maturityDate;\\n        state.notionalPrincipal = terms.notionalPrincipal;\\n        state.nominalInterestRate = terms.nominalInterestRate;\\n        state.accruedInterest = terms.accruedInterest;\\n        state.feeAccrued = terms.feeAccrued;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint16 index;\\n\\n        // initial exchange\\n        if (terms.purchaseDate == 0 && isInSegment(terms.initialExchangeDate, segmentStart, segmentEnd)) {\\n            events[index] = encodeEvent(EventType.IED, terms.initialExchangeDate);\\n            index++;\\n        }\\n\\n        // purchase\\n        if (terms.purchaseDate != 0) {\\n            if (isInSegment(terms.purchaseDate, segmentStart, segmentEnd)) {\\n                events[index] = encodeEvent(EventType.PRD, terms.purchaseDate);\\n                index++;\\n            }\\n        }\\n\\n        // principal redemption\\n        if (isInSegment(terms.maturityDate, segmentStart, segmentEnd)) {\\n            events[index] = encodeEvent(EventType.MD, terms.maturityDate);\\n            index++;\\n        }\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint256 index;\\n\\n        // IP\\n        // interest payment related (starting with PRANX interest is paid following the PR schedule)\\n        if (eventType == EventType.IP) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory interestPaymentSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    terms.maturityDate,\\n                    terms.cycleOfInterestPayment,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (interestPaymentSchedule[i] == 0) break;\\n                    if (interestPaymentSchedule[i] <= terms.capitalizationEndDate) continue;\\n                    if (isInSegment(interestPaymentSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.IP, interestPaymentSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // IPCI\\n        if (eventType == EventType.IPCI) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0 && terms.capitalizationEndDate != 0) {\\n                IPS memory cycleOfInterestCapitalization = terms.cycleOfInterestPayment;\\n                cycleOfInterestCapitalization.s = S.SHORT;\\n                uint256[MAX_CYCLE_SIZE] memory interestPaymentSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    terms.capitalizationEndDate,\\n                    cycleOfInterestCapitalization,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (interestPaymentSchedule[i] == 0) break;\\n                    if (isInSegment(interestPaymentSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.IPCI, interestPaymentSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // rate reset\\n        if (eventType == EventType.RR) {\\n            if (terms.cycleAnchorDateOfRateReset != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory rateResetSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfRateReset,\\n                    terms.maturityDate,\\n                    terms.cycleOfRateReset,\\n                    terms.endOfMonthConvention,\\n                    false,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (rateResetSchedule[i] == 0) break;\\n                    if (isInSegment(rateResetSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.RR, rateResetSchedule[i]);\\n                    index++;\\n                }\\n            }\\n            // ... nextRateReset\\n        }\\n\\n        // fees\\n        if (eventType == EventType.FP) {\\n            if (terms.cycleAnchorDateOfFee != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory feeSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfFee,\\n                    terms.maturityDate,\\n                    terms.cycleOfFee,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (feeSchedule[i] == 0) break;\\n                    if (isInSegment(feeSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.FP, feeSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // scaling\\n        if (eventType == EventType.SC) {\\n            if ((terms.scalingEffect != ScalingEffect._000) && terms.cycleAnchorDateOfScalingIndex != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory scalingSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfScalingIndex,\\n                    terms.maturityDate,\\n                    terms.cycleOfScalingIndex,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (scalingSchedule[i] == 0) break;\\n                    if (isInSegment(scalingSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.SC, scalingSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        PAMTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        (EventType lastEventType, uint256 lastScheduleTime) = decodeEvent(lastNonCyclicEvent);\\n\\n        EventType eventTypeNextEvent;\\n        uint256 scheduleTimeNextEvent;\\n\\n        // EventTypes ordered after epoch offset - so we don't have make an additional epochOffset check\\n\\n        // initial exchange\\n        if (\\n            // date for event has to be set in terms and date of event can be in the past\\n            (terms.initialExchangeDate != 0 && (lastScheduleTime <= terms.initialExchangeDate))\\n            // date for event has to come before previous candidate for the next event\\n            && (scheduleTimeNextEvent == 0 || terms.initialExchangeDate < scheduleTimeNextEvent)\\n            // avoid endless loop by requiring that the event is not the lastNonCyclicEvent\\n            && (lastScheduleTime != terms.initialExchangeDate || lastEventType != EventType.IED)\\n        ) {\\n            eventTypeNextEvent = EventType.IED;\\n            scheduleTimeNextEvent = terms.initialExchangeDate;\\n        }\\n\\n        // purchase\\n        if (\\n            (terms.purchaseDate != 0 && (lastScheduleTime <= terms.purchaseDate))\\n            && (scheduleTimeNextEvent == 0 || terms.purchaseDate < scheduleTimeNextEvent)\\n            && (lastScheduleTime != terms.purchaseDate || lastEventType != EventType.PRD)\\n        ) {\\n            eventTypeNextEvent = EventType.PRD;\\n            scheduleTimeNextEvent = terms.purchaseDate;\\n        }\\n\\n        // principal redemption at maturity\\n        if (\\n            (terms.maturityDate != 0 && (lastScheduleTime <= terms.maturityDate))\\n            && (scheduleTimeNextEvent == 0 || terms.maturityDate < scheduleTimeNextEvent)\\n            && (lastScheduleTime != terms.maturityDate || lastEventType != EventType.MD)\\n        ) {\\n            eventTypeNextEvent = EventType.MD;\\n            scheduleTimeNextEvent = terms.maturityDate;\\n        }\\n\\n        return encodeEvent(eventTypeNextEvent, scheduleTimeNextEvent);\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        PAMTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32)\\n    {\\n        // IP\\n        // interest payment related (starting with PRANX interest is paid following the PR schedule)\\n        if (eventType == EventType.IP) {\\n            if (terms.cycleOfInterestPayment.isSet == true && terms.cycleAnchorDateOfInterestPayment != 0) {\\n                uint256 nextInterestPaymentDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfInterestPayment,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextInterestPaymentDate == 0) return bytes32(0);\\n                if (nextInterestPaymentDate <= terms.capitalizationEndDate) return bytes32(0);\\n                return encodeEvent(EventType.IP, nextInterestPaymentDate);\\n            }\\n        }\\n\\n        // IPCI\\n        if (eventType == EventType.IPCI) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0 && terms.capitalizationEndDate != 0) {\\n                IPS memory cycleOfInterestCapitalization = terms.cycleOfInterestPayment;\\n                cycleOfInterestCapitalization.s = S.SHORT;\\n                uint256 nextInterestCapitalizationDate = computeNextCycleDateFromPrecedingDate(\\n                    cycleOfInterestCapitalization,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextInterestCapitalizationDate == 0) return bytes32(0);\\n                return encodeEvent(EventType.IPCI, nextInterestCapitalizationDate);\\n            }\\n        }\\n\\n        // rate reset\\n        if (eventType == EventType.RR) {\\n            if (terms.cycleAnchorDateOfRateReset != 0) {\\n                uint256 nextRateResetDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfRateReset,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfRateReset,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextRateResetDate == 0) return bytes32(0);\\n                return encodeEvent(EventType.RR, nextRateResetDate);\\n            }\\n            // ... nextRateReset\\n        }\\n\\n        // fees\\n        if (eventType == EventType.FP) {\\n            if (terms.cycleAnchorDateOfFee != 0) {\\n                uint256 nextFeeDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfFee,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfFee,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextFeeDate == 0) return bytes32(0);\\n                return encodeEvent(EventType.FP, nextFeeDate);\\n            }\\n        }\\n\\n        // scaling\\n        if (eventType == EventType.SC) {\\n            if ((terms.scalingEffect != ScalingEffect._000) && terms.cycleAnchorDateOfScalingIndex != 0) {\\n                uint256 nextScalingDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfScalingIndex,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfScalingIndex,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextScalingDate == 0) return bytes32(0);\\n                return encodeEvent(EventType.SC, nextScalingDate);\\n            }\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * param _event event for which to check if its still scheduled\\n     * param terms terms of the contract\\n     * param state current state of the contract\\n     * param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 /* _event */,\\n        PAMTerms calldata /* terms */,\\n        State calldata /* state */,\\n        bool /* hasUnderlying */,\\n        State calldata /* underlyingState */\\n    )\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Applies an event to the current state of the contract and returns the resulting state.\\n     * The inheriting Engine contract has to map the events type to the designated STF.\\n     * todo Annuity calculator for RR/RRF events, IPCB events and ICB state variable\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which to evaluate the next state for\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function stateTransitionFunction(\\n        PAMTerms memory terms,\\n        State memory state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        /*\\n         * Note:\\n         * Not supported: PRD (Purchase) events\\n         */\\n\\n        if (eventType == EventType.AD) return STF_PAM_AD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.FP) return STF_PAM_FP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IED) return STF_PAM_IED(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IPCI) return STF_PAM_IPCI(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IP) return STF_PAM_IP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.PP) return STF_PAM_PP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.MD) return STF_PAM_MD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.PY) return STF_PAM_PY(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.RRF) return STF_PAM_RRF(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.RR) return STF_PAM_RR(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.SC) return STF_PAM_SC(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.TD) return STF_PAM_TD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.CE)  return STF_PAM_CE(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"PAMEngine.stateTransitionFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Computes the payoff for an event under the current state of the contract.\\n     * The inheriting Engine contract has to map the events type to the designated POF.\\n     * todo IPCB events and Icb state variable, Icb state variable updates in IP-paying events\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function payoffFunction(\\n        PAMTerms memory terms,\\n        State memory state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        /*\\n         * Note: PAM contracts don't have IPCB and PR events.\\n         * Not supported: PRD (Purchase) events\\n         */\\n\\n        if (eventType == EventType.AD) return 0;\\n        if (eventType == EventType.IPCI) return 0;\\n        if (eventType == EventType.RRF) return 0;\\n        if (eventType == EventType.RR) return 0;\\n        if (eventType == EventType.SC) return 0;\\n        if (eventType == EventType.CE) return 0;\\n        if (eventType == EventType.FP) return POF_PAM_FP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IED) return POF_PAM_IED(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IP) return POF_PAM_IP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.PP) return POF_PAM_PP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.MD) return POF_PAM_MD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.PY) return POF_PAM_PY(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.TD) return POF_PAM_TD(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"PAMEngine.payoffFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x58b0824d99c4275af06f2bdf08e29505eb26a8684fe87da080d2ed2fd158b9b0\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/PAM/PAMPOF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title POF\\n * @notice Contains all payoff functions (POFs) currently used by all Engines\\n */\\ncontract PAMPOF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * Calculate the pay-off for PAM Fees. The method how to calculate the fee\\n     * heavily depends on the selected Fee Basis.\\n     * @return the fee amount for PAM contracts\\n     */\\n    function POF_PAM_FP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        if (terms.feeBasis == FeeBasis.A) {\\n            return (\\n                roleSign(terms.contractRole)\\n                * terms.feeRate\\n            );\\n        }\\n\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return (\\n            state.feeAccrued\\n            .add(\\n                timeFromLastEvent\\n                .floatMult(terms.feeRate)\\n                .floatMult(state.notionalPrincipal)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Calculate the payoff for the initial exchange\\n     * @return the payoff at iniitial exchange for PAM contracts\\n     */\\n    function POF_PAM_IED (\\n        PAMTerms memory terms,\\n        State memory /* state */,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            roleSign(terms.contractRole)\\n            * (-1)\\n            * terms.notionalPrincipal\\n                .add(terms.premiumDiscountAtIED)\\n        );\\n    }\\n\\n    /**\\n     * Calculate the interest payment payoff\\n     * @return the interest amount to pay for PAM contracts\\n     */\\n    function POF_PAM_IP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return (\\n            state.interestScalingMultiplier\\n            .floatMult(\\n                state.accruedInterest\\n                .add(\\n                    timeFromLastEvent\\n                    .floatMult(state.nominalInterestRate)\\n                    .floatMult(state.notionalPrincipal)\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Calculate the principal prepayment payoff\\n     * @return the principal prepayment amount for PAM contracts\\n     */\\n    function POF_PAM_PP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            roleSign(terms.contractRole)\\n            * state.notionalPrincipal\\n        );\\n    }\\n\\n    /**\\n     * Calculate the payoff in case of maturity\\n     * @return the maturity payoff for PAM contracts\\n     */\\n    function POF_PAM_MD (\\n        PAMTerms memory /* terms */,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            state.notionalScalingMultiplier\\n                .floatMult(state.notionalPrincipal)\\n        );\\n    }\\n\\n    /**\\n     * Calculate the payoff in case of a penalty event\\n     * @return the penalty amount for PAM contracts\\n     */\\n    function POF_PAM_PY (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        if (terms.penaltyType == PenaltyType.A) {\\n            return (\\n                roleSign(terms.contractRole)\\n                * terms.penaltyRate\\n            );\\n        } else if (terms.penaltyType == PenaltyType.N) {\\n            return (\\n                roleSign(terms.contractRole)\\n                * timeFromLastEvent\\n                .floatMult(terms.penaltyRate)\\n                .floatMult(state.notionalPrincipal)\\n            );\\n        } else {\\n            return (\\n                roleSign(terms.contractRole)\\n                * timeFromLastEvent\\n                .floatMult(state.notionalPrincipal)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Calculate the payoff in case of termination of a contract\\n     * @return the termination payoff amount for PAM contracts\\n     */\\n    function POF_PAM_TD (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return (\\n            roleSign(terms.contractRole)\\n            * terms.priceAtPurchaseDate\\n            .add(state.accruedInterest)\\n            .add(\\n                timeFromLastEvent\\n                .floatMult(state.nominalInterestRate)\\n                .floatMult(state.notionalPrincipal)\\n            )\\n        );\\n    }\\n}\",\"keccak256\":\"0xc4e59cac4403f987a695290bacf7762b81aad6869c260464629dd0f1771ee997\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/PAM/PAMSTF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title STF\\n * @notice Contains all state transition functions (STFs) currently used by all Engines\\n */\\ncontract PAMSTF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * State transition for PAM analysis events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_NE (\\n        PAMTerms memory /* terms */,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM analysis events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_AD (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM fee payment events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_FP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = 0;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM initial exchange\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_IED (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.notionalPrincipal = roleSign(terms.contractRole) * terms.notionalPrincipal;\\n        state.nominalInterestRate = terms.nominalInterestRate;\\n        state.statusDate = scheduleTime;\\n        state.accruedInterest = terms.accruedInterest;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM interest capitalization\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_IPCI (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.notionalPrincipal = state.notionalPrincipal\\n        .add(\\n            state.accruedInterest\\n            .add(\\n                state.nominalInterestRate\\n                .floatMult(state.notionalPrincipal)\\n                .floatMult(timeFromLastEvent)\\n            )\\n        );\\n        state.accruedInterest = 0;\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM interest payment\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_IP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = 0;\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM principal prepayment\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_PP (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        // state.notionalPrincipal -= 0; // riskFactor not supported\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM principal redemption\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_PR (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.notionalPrincipal = 0;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM penalty payments\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_PY (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM fixed rate resets\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_RRF (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.nominalInterestRate = terms.nextResetRate;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM variable rate resets\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_RR (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        // apply external rate, multiply with rateMultiplier and add the spread\\n        // riskFactor not supported\\n        int256 rate = int256(uint256(externalData)).floatMult(terms.rateMultiplier).add(terms.rateSpread);\\n\\n        // deltaRate is the difference between the rate that includes external data, spread and multiplier and the currently active rate from the state\\n        int256 deltaRate = rate.sub(state.nominalInterestRate);\\n\\n        // apply period cap/floor\\n        // the deltaRate (the interest rate change) cannot be bigger than the period cap\\n        // and not smaller than the period floor\\n        // math: deltaRate = min(max(deltaRate, periodFloor),lifeCap)\\n        deltaRate = deltaRate.max(terms.periodFloor).min(terms.periodCap);\\n        rate = state.nominalInterestRate.add(deltaRate);\\n\\n        // apply life cap/floor\\n        // the rate cannot be higher than the lifeCap\\n        // and not smaller than the lifeFloor\\n        // math: rate = min(max(rate,lifeFloor),lifeCap)\\n        rate = rate.max(terms.lifeFloor).min(terms.lifeCap);\\n\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.nominalInterestRate = rate;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM scaling index revision events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_SC (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n\\n        if ((terms.scalingEffect == ScalingEffect.I00) || (terms.scalingEffect == ScalingEffect.IN0)) {\\n            state.interestScalingMultiplier = 0; // riskFactor not supported\\n        }\\n        if ((terms.scalingEffect == ScalingEffect._0N0) || (terms.scalingEffect == ScalingEffect.IN0)) {\\n            state.notionalScalingMultiplier = 0; // riskFactor not supported\\n        }\\n\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM principal redemption\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_MD (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.feeAccrued = state.feeAccrued\\n        .add(\\n            terms.feeRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.notionalPrincipal = 0;\\n        state.contractPerformance = ContractPerformance.MD;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM termination events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_TD (\\n        PAMTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.notionalPrincipal = 0;\\n        state.nominalInterestRate = 0;\\n        state.accruedInterest = 0;\\n        state.feeAccrued = 0;\\n        state.contractPerformance = ContractPerformance.TD;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for PAM credit events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_PAM_CE (\\n        PAMTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns(State memory)\\n    {\\n        // handle maturity date\\n        uint256 nonPerformingDate = (state.nonPerformingDate == 0)\\n            ? shiftEventTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            ) : state.nonPerformingDate;\\n\\n        uint256 currentTimestamp = uint256(externalData);\\n\\n        bool isInGracePeriod = false;\\n        if (terms.gracePeriod.isSet) {\\n            uint256 graceDate = getTimestampPlusPeriod(terms.gracePeriod, nonPerformingDate);\\n            if (currentTimestamp <= graceDate) {\\n                state.contractPerformance = ContractPerformance.DL;\\n                isInGracePeriod = true;\\n            }\\n        }\\n\\n        if (terms.delinquencyPeriod.isSet && !isInGracePeriod) {\\n            uint256 delinquencyDate = getTimestampPlusPeriod(terms.delinquencyPeriod, nonPerformingDate);\\n            if (currentTimestamp <= delinquencyDate) {\\n                state.contractPerformance = ContractPerformance.DQ;\\n            } else {\\n                state.contractPerformance = ContractPerformance.DF;\\n            }\\n        }\\n\\n        if (state.nonPerformingDate == 0) {\\n            // handle maturity date\\n            state.nonPerformingDate = shiftEventTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x784ce230868d73fe29eba13abad6996ce39629de08a6bd13048d502c760325a1\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063aaf5eb68116100ad578063e05a66e011610071578063e05a66e014610287578063e18bac181461029a578063e726d680146102ad578063edc0465f1461024a578063f5586e05146102c05761012c565b8063aaf5eb681461022f578063b0e9e58614610237578063c40c5a981461024a578063cb2ef6f714610252578063cb971d95146102675761012c565b8063443cd78e116100f4578063443cd78e146101cd5780635c0e2026146101e05780636f37e55b146101f357806372540003146101fb578063811322fb1461021c5761012c565b806308e3616b1461013157806315df69201461015a578063179331f31461017a57806318640feb1461019a5780631a2e165d146101ba575b600080fd5b61014461013f366004613867565b6102d3565b6040516101519190613da5565b60405180910390f35b61016d610168366004613713565b61043c565b6040516101519190613d9a565b61018d610188366004613793565b610447565b6040516101519190613dc2565b6101ad6101a8366004613910565b610517565b6040516101519190613d56565b6101446101c83660046136ce565b61068a565b6101446101db366004613893565b6106b1565b6101ad6101ee366004613946565b610780565b610144610ce5565b61020e6102093660046136b6565b610cf1565b604051610151929190613dd0565b61014461022a3660046137d1565b610d1a565b610144610d30565b6101446102453660046138da565b610d35565b61014461102b565b61025a611030565b6040516101519190613dae565b61027a610275366004613893565b611035565b6040516101519190613fef565b6101446102953660046137eb565b611065565b61027a6102a836600461384b565b611083565b6101446102bb366004613d33565b6110fa565b6101446102ce366004613d33565b611246565b60008060006102e184610cf1565b91509150600080866101c001356000141580156103035750866101c001358311155b801561031b575080158061031b575080876101c00135105b80156103425750866101c00135831415806103425750600384602181111561033f57fe5b14155b156103535750600390506101c08601355b6102208701351580159061036c57508661022001358311155b80156103845750801580610384575080876102200135105b80156103ab5750866102200135831415806103ab575060048460218111156103a857fe5b14155b156103bc5750600490506102208601355b6101e0870135158015906103d55750866101e001358311155b80156103ed57508015806103ed575080876101e00135105b80156104145750866101e00135831415806104145750602084602181111561041157fe5b14155b156104255750602090506101e08601355b61042f8282611065565b9450505050505b92915050565b600195945050505050565b6000600184600181111561045757fe5b14156104d357610466836112b1565b61046f846112d3565b1480156104be575060028260200151600581111561048957fe5b14806104a457506003826020015160058111156104a257fe5b145b806104be57506004826020015160058111156104bc57fe5b145b156104cb57506001610510565b506000610510565b60008460018111156104e157fe5b14156104ef57506000610510565b60405162461bcd60e51b815260040161050790613f84565b60405180910390fd5b9392505050565b6060610521613404565b60006102208601351580156105415750610541866101c0013586866112e2565b1561056f576105566003876101c00135611065565b828261ffff166078811061056657fe5b60200201526001015b610220860135156105b85761058a86610220013586866112e2565b156105b85761059f6004876102200135611065565b828261ffff16607881106105af57fe5b60200201526001015b6105c8866101e0013586866112e2565b156105f6576105dd6020876101e00135611065565b828261ffff16607881106105ed57fe5b60200201526001015b60608161ffff1667ffffffffffffffff8111801561061357600080fd5b5060405190808252806020026020018201604052801561063d578160200160208202803683370190505b50905060005b8261ffff1681101561067f5783816078811061065b57fe5b602002015182828151811061066c57fe5b6020908102919091010152600101610643565b509695505050505050565b60008061069686610cf1565b9150506106a5818686866110fa565b9150505b949350505050565b6000806106c661016087016101408801613682565b6001600160a01b03161415801561071157506106ea61016086016101408701613682565b6001600160a01b031661070561014087016101208801613682565b6001600160a01b031614155b1561074f576107488261074261072c36899003890189613990565b61073b36899003890189613c16565b8787611311565b906114df565b90506106a9565b61077761076136879003870187613990565b61077036879003870187613c16565b8585611311565b95945050505050565b606061078a613404565b6000600a84602181111561079a57fe5b14156108a857610260870135156108a8576107b3613404565b6107ee6102608901356101e08a01356107d5368c90038c016105a08d01613830565b6107e560c08d0160a08e01613777565b60018c8c6115da565b905060005b60788160ff1610156108a557818160ff166078811061080e57fe5b602002015161081c576108a5565b886102400135828260ff166078811061083157fe5b6020020151116108405761089d565b61085e828260ff166078811061085257fe5b602002015189896112e2565b6108675761089d565b610885600a838360ff166078811061087b57fe5b6020020151611065565b84846078811061089157fe5b60200201526001909201915b6001016107f3565b50505b600b8460218111156108b657fe5b14156109bb57610260870135158015906108d4575061024087013515155b156109bb576108e1613423565b6108f43689900389016105a08a01613830565b600160408201529050610905613404565b61092e6102608a01356102408b01358461092560c08e0160a08f01613777565b60018d8d6115da565b905060005b60788160ff1610156109b757818160ff166078811061094e57fe5b602002015161095c576109b7565b61097a828260ff166078811061096e57fe5b60200201518a8a6112e2565b610983576109af565b610997600b838360ff166078811061087b57fe5b8585607881106109a357fe5b60200201526001909301925b600101610933565b5050505b600d8460218111156109c957fe5b1415610a9d5761028087013515610a9d576109e2613404565b610a1d6102808901356101e08a0135610a04368c90038c016106208d01613830565b610a1460c08d0160a08e01613777565b60008c8c6115da565b905060005b60788160ff161015610a9a57818160ff1660788110610a3d57fe5b6020020151610a4b57610a9a565b610a5d828260ff166078811061085257fe5b610a6657610a92565b610a7a600d838360ff166078811061087b57fe5b848460788110610a8657fe5b60200201526001909201915b600101610a22565b50505b6005846021811115610aab57fe5b1415610b66576102c087013515610b6657610ac4613404565b610ae66102c08901356101e08a01356107d5368c90038c016107208d01613830565b905060005b60788160ff161015610b6357818160ff1660788110610b0657fe5b6020020151610b1457610b63565b610b26828260ff166078811061085257fe5b610b2f57610b5b565b610b436005838360ff166078811061087b57fe5b848460788110610b4f57fe5b60200201526001909201915b600101610aeb565b50505b601b846021811115610b7457fe5b1415610c58576000610b8c60e0890160c08a01613814565b6003811115610b9757fe5b14158015610ba957506102a087013515155b15610c5857610bb6613404565b610bd86102a08901356101e08a01356107d5368c90038c016106a08d01613830565b905060005b60788160ff161015610c5557818160ff1660788110610bf857fe5b6020020151610c0657610c55565b610c18828260ff166078811061085257fe5b610c2157610c4d565b610c35601b838360ff166078811061087b57fe5b848460788110610c4157fe5b60200201526001909201915b600101610bdd565b50505b60608167ffffffffffffffff81118015610c7157600080fd5b50604051908082528060200260200182016040528015610c9b578160200160208202803683370190505b50905060005b82811015610cd957838160788110610cb557fe5b6020020151828281518110610cc657fe5b6020908102919091010152600101610ca1565b50979650505050505050565b670de0b6b3a764000081565b6000808060f884901c6021811115610d0557fe5b92505067ffffffffffffffff83169050915091565b6000816021811115610d2857fe5b90505b919050565b601281565b6000600a826021811115610d4557fe5b1415610ded57610d5d6106208501610600860161369c565b15156001148015610d72575061026084013515155b15610ded576000610db3610d8f3687900387016105a08801613830565b610d9f60c0880160a08901613777565b8761026001358760018a6101e001356117c4565b905080610dc4575060009050610510565b8461024001358111610dda575060009050610510565b610de5600a82611065565b915050610510565b600b826021811115610dfb57fe5b1415610e935761026084013515801590610e19575061024084013515155b15610e9357610e26613423565b610e393686900386016105a08701613830565b6001604082015290506000610e6c82610e5860c0890160a08a01613777565b8861026001358860018b6101e001356117c4565b905080610e7f5750600091506105109050565b610e8a600b82611065565b92505050610510565b600d826021811115610ea157fe5b1415610f0a5761028084013515610f0a576000610eee610eca3687900387016106208801613830565b610eda60c0880160a08901613777565b8761028001358760018a6101e001356117c4565b905080610eff575060009050610510565b610de5600d82611065565b6005826021811115610f1857fe5b1415610f81576102c084013515610f81576000610f65610f413687900387016107208801613830565b610f5160c0880160a08901613777565b876102c001358760018a6101e001356117c4565b905080610f76575060009050610510565b610de5600582611065565b601b826021811115610f8f57fe5b1415611021576000610fa760e0860160c08701613814565b6003811115610fb257fe5b14158015610fc457506102a084013515155b15611021576000611005610fe13687900387016106a08801613830565b610ff160c0880160a08901613777565b876102a001358760018a6101e001356117c4565b905080611016575060009050610510565b610de5601b82611065565b5060009392505050565b607881565b600090565b61103d61344c565b61077761104f36879003870187613990565b61105e36879003870187613c16565b858561188b565b60008160f884602181111561107657fe5b60ff16901b179392505050565b61108b61344c565b61109361344c565b60008152670de0b6b3a76400006101a080830182905261018083019190915283013560208201526101e083013560608201526102e08301356101008201526103008301356101608201526103208301356101208201526103c0909201356101408301525090565b60008185141561110b5750836106a9565b600184600881111561111957fe5b14806111305750600384600881111561112e57fe5b145b1561113f576107488584611a5c565b600284600881111561114d57fe5b14806111645750600484600881111561116257fe5b145b156111a85760006111758685611a5c565b905061118086611ab8565b61118982611ab8565b14156111965790506106a9565b6111a08685611acf565b9150506106a9565b60058460088111156111b657fe5b14806111cd575060078460088111156111cb57fe5b145b156111dc576107488584611acf565b60068460088111156111ea57fe5b1480611201575060088460088111156111ff57fe5b145b1561123d5760006112128685611acf565b905061121d86611ab8565b61122682611ab8565b14156112335790506106a9565b6111a08685611a5c565b50929392505050565b6000600384600881111561125657fe5b148061126d5750600484600881111561126b57fe5b145b806112835750600784600881111561128157fe5b145b806112995750600884600881111561129757fe5b145b156112a55750836106a9565b610777858585856110fa565b600080806112c462015180855b04611b1d565b50915091506106a98282611bb3565b60006106a962015180836112be565b6000818311156112f457506000610510565b8383111580156113045750818411155b1561102157506001610510565b600080600061131f85610cf1565b9092509050602182602181111561133257fe5b1415611343576000925050506106a9565b600b82602181111561135157fe5b1415611362576000925050506106a9565b600c82602181111561137057fe5b1415611381576000925050506106a9565b600d82602181111561138f57fe5b14156113a0576000925050506106a9565b601b8260218111156113ae57fe5b14156113bf576000925050506106a9565b60018260218111156113cd57fe5b14156113de576000925050506106a9565b60058260218111156113ec57fe5b1415611407576113fe87878387611c39565b925050506106a9565b600382602181111561141557fe5b1415611427576113fe87878387611cee565b600a82602181111561143557fe5b1415611447576113fe87878387611d2c565b600982602181111561145557fe5b1415611467576113fe87878387611d90565b602082602181111561147557fe5b1415611487576113fe87878387611db2565b600882602181111561149557fe5b14156114a7576113fe87878387611dd1565b601f8260218111156114b557fe5b14156114c7576113fe87878387611e84565b60405162461bcd60e51b815260040161050790613e84565b60008215806114ec575081155b156114f957506000610436565b8260001914801561150d5750600160ff1b82145b156115495760405162461bcd60e51b81526004018080602001828103825260278152602001806142006027913960400191505060405180910390fd5b8282028284828161155657fe5b05146115935760405162461bcd60e51b81526004018080602001828103825260278152602001806142006027913960400191505060405180910390fd5b670de0b6b3a76400008105806106a95760405162461bcd60e51b81526004018080602001828103825260328152602001806141796032913960400191505060405180910390fd5b6115e2613404565b6115ea613404565b6060870151600090611652576116018a86866112e2565b1561161c578982826078811061161357fe5b60200201526001015b6116278986866112e2565b1561164a576001861515141561164a578882826078811061164457fe5b60200201525b5090506117b9565b896000806116618a848d610447565b90505b8b8310156116f6576116778389896112e2565b156116b5576076841061169c5760405162461bcd60e51b815260040161050790613de8565b828585607881106116a957fe5b60200201526001909301925b6001918201918160018111156116c757fe5b146116dc576116d78b8e84611f03565b6116ef565b6116ef6116ea8c8f85611f03565b61203d565b9250611664565b600189151514156117245761170c8c89896112e2565b15611724578b85856078811061171e57fe5b60200201525b600084118015611741575061174185600186036078811061085257fe5b156117b15760008b60400151600181111561175857fe5b1480156117655750600184115b80156117715750828c14155b156117b15784846078811061178257fe5b602002015185600186036078811061179657fe5b60200201528484607881106117a757fe5b6020020160008152505b509293505050505b979650505050505050565b606086015160009015806117d6575083155b156117e2575083611881565b600060016117f188888b610447565b60018111156117fc57fe5b146118125761180d88866001611f03565b611821565b6118216116ea89876001611f03565b905083801561182f57508215155b156118575782851415611846576000915050611881565b828111156118575782915050611881565b8315801561186457508215155b801561186f57508281145b1561187e576000915050611881565b90505b9695505050505050565b61189361344c565b60008061189f85610cf1565b909250905060218260218111156118b257fe5b14156118c4576113fe8787838761206c565b60058260218111156118d257fe5b14156118e4576113fe87878387612101565b60038260218111156118f257fe5b1415611904576113fe8787838761216c565b600b82602181111561191257fe5b1415611924576113fe878783876121b4565b600a82602181111561193257fe5b1415611944576113fe8787838761223d565b600982602181111561195257fe5b1415611964576113fe8787838761206c565b602082602181111561197257fe5b1415611984576113fe87878387612291565b600882602181111561199257fe5b14156119a4576113fe8787838761206c565b600c8260218111156119b257fe5b14156119c4576113fe87878387612326565b600d8260218111156119d257fe5b14156119e4576113fe878783876123be565b601b8260218111156119f257fe5b1415611a04576113fe878783876124f8565b601f826021811115611a1257fe5b1415611a24576113fe878783876125f7565b6001826021811115611a3257fe5b1415611a44576113fe8787838761262f565b60405162461bcd60e51b815260040161050790613ed1565b60006001826001811115611a6c57fe5b1415611ab157611a7b8361271a565b60061415611a9557611a8e83600261272d565b9050610436565b611a9e8361271a565b60071415611ab157611a8e83600161272d565b5090919050565b6000611ac762015180836112be565b509392505050565b60006001826001811115611adf57fe5b1415611ab157611aee8361271a565b60061415611b0157611a8e836001612742565b611b0a8361271a565b60071415611ab157611a8e836002612742565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281611b7457fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b60008160011480611bc45750816003145b80611bcf5750816005145b80611bda5750816007145b80611be55750816008145b80611bf0575081600a145b80611bfb575081600c145b15611c085750601f610436565b81600214611c185750601e610436565b611c2183612757565b611c2c57601c611c2f565b601d5b60ff169392505050565b6000808561010001516001811115611c4d57fe5b1415611c7157846103a00151611c66866040015161277c565b60000b0290506106a9565b6000611cbc611c938660200151886080015189602001518a6101e00151611246565b611cac8689608001518a602001518b6101e00151611246565b8860600151896101e0015161285f565b90506106a5611ce2866101000151610742896103a00151856114df90919063ffffffff16565b610140870151906129b9565b6000611d0d856104200151866102e001516129b990919063ffffffff16565b611d1a866040015161277c565b6000190260000b029050949350505050565b600080611d4f611c938660200151886080015189602001518a6101e00151611246565b90506106a5611d84611d78876101000151610742896101600151866114df90919063ffffffff16565b610120880151906129b9565b610180870151906114df565b6000836101000151611da5866040015161277c565b60000b0295945050505050565b6000610777846101000151856101a001516114df90919063ffffffff16565b600080611df4611c938660200151886080015189602001518a6101e00151611246565b905060018660e001516003811115611e0857fe5b1415611e2d57856103e00151611e21876040015161277c565b60000b029150506106a9565b60028660e001516003811115611e3f57fe5b1415611e7357611e66856101000151610742886103e00151846114df90919063ffffffff16565b611e21876040015161277c565b610100850151611e669082906114df565b600080611ea7611c938660200151886080015189602001518a6101e00151611246565b9050611ee8611ecd866101000151610742886101600151856114df90919063ffffffff16565b610120870151610440890151611ee2916129b9565b906129b9565b611ef5876040015161277c565b60000b029695505050505050565b6000808085602001516005811115611f1757fe5b1415611f3457845161074890611f2d9085612a1e565b859061272d565b600185602001516005811115611f4657fe5b1415611f6957845161074890611f2d908590611f63906007612a1e565b90612a1e565b600285602001516005811115611f7b57fe5b1415611f9857845161074890611f919085612a1e565b8590612a77565b600385602001516005811115611faa57fe5b1415611fc757845161074890611f91908590611f63906003612a1e565b600485602001516005811115611fd957fe5b1415611ff657845161074890611f91908590611f63906006612a1e565b60058560200151600581111561200857fe5b14156120255784516107489061201e9085612a1e565b8590612af1565b60405162461bcd60e51b815260040161050790613e36565b60008060008061204c85612b18565b91945092509050600061205f8484611bb3565b9050611881848483612b36565b61207461344c565b6000612096611c938660200151886080015189602001518a6101e00151611246565b90506120c86120bc826107428861010001518961016001516114df90919063ffffffff16565b610120870151906129b9565b6101208601526101008501516103a08701516120ee91611ce291849161074291906114df565b6101408601525050506020820152919050565b61210961344c565b600061212b611c938660200151886080015189602001518a6101e00151611246565b90506121516120bc826107428861010001518961016001516114df90919063ffffffff16565b61012086015250506000610140840152506020820152919050565b61217461344c565b846102e00151612187866040015161277c565b60000b02610100850152505061030083015161016083015260208201526103209091015161012082015290565b6121bc61344c565b60006121de611c938660200151886080015189602001518a6101e00151611246565b9050612213612207611d78836107428961010001518a61016001516114df90919063ffffffff16565b610100870151906129b9565b610100860181905260006101208701526103a08701516120ee91611ce291849161074291906114df565b61224561344c565b6000612267611c938660200151886080015189602001518a6101e00151611246565b60006101208701526101008601516103a08801519192506120ee91611ce2918491610742916114df565b61229961344c565b60006122bb611c938660200151886080015189602001518a6101e00151611246565b90506122e16120bc826107428861010001518961016001516114df90919063ffffffff16565b6101208601526101008501516103a087015161230791611ce291849161074291906114df565b6101408601525050600061010084015250600482526020820152919050565b61232e61344c565b6000612350611c938660200151886080015189602001518a6101e00151611246565b90506123766120bc826107428861010001518961016001516114df90919063ffffffff16565b6101208601526101008501516103a087015161239c91611ce291849161074291906114df565b6101408601525050506103809290920151610160820152602081019190915290565b6123c661344c565b6103608501516103408601516000916123e491611ee29086906114df565b9050600061240086610160015183612b5090919063ffffffff16565b9050612429876104a00151612423896104c0015184612bb590919063ffffffff16565b90612bc5565b61016087015190915061243c90826129b9565b915061245f87610460015161242389610480015185612bb590919063ffffffff16565b915060006124ac61248388602001518a608001518b602001518c6101e00151611246565b61249c888b608001518c602001518d6101e00151611246565b8a606001518b6101e0015161285f565b90506124de6124d2826107428a61010001518b61016001516114df90919063ffffffff16565b610120890151906129b9565b610120880152505061016085015250506020820152919050565b61250061344c565b6000612522611c938660200151886080015189602001518a6101e00151611246565b90506125486120bc826107428861010001518961016001516114df90919063ffffffff16565b6101208601526101008501516103a087015161256e91611ce291849161074291906114df565b61014086015260018660c00151600381111561258657fe5b14806125a1575060038660c00151600381111561259f57fe5b145b156125af5760006101808601525b60028660c0015160038111156125c157fe5b14806125dc575060038660c0015160038111156125da57fe5b145b156125ea5760006101a08601525b5050506020820152919050565b6125ff61344c565b50506000610100830181905261016083018190526101208301819052610140830152600582526020820152919050565b61263761344c565b6000846040015160001461264f578460400151612668565b6126688487608001518860200151896101e001516110fa565b6104e0870151604001519091508390600090156126a3576000612690896104e0015185612bd5565b90508083116126a157600180895291505b505b8761050001516040015180156126b7575080155b156126e65760006126cd89610500015185612bd5565b90508083116126df57600288526126e4565b600388525b505b604087015161270e576127088689608001518a602001518b6101e001516110fa565b60408801525b50949695505050505050565b6007620151809091046003010660010190565b62015180810282018281101561043657600080fd5b62015180810282038281111561043657600080fd5b60006004820615801561276c57506064820615155b80610d2857505061019090061590565b60008082600c81111561278b57fe5b141561279957506001610d2b565b600182600c8111156127a757fe5b14156127b65750600019610d2b565b600682600c8111156127c457fe5b14156127d257506001610d2b565b600782600c8111156127e057fe5b14156127ef5750600019610d2b565b600282600c8111156127fd57fe5b141561280b57506001610d2b565b600382600c81111561281957fe5b14156128285750600019610d2b565b60405162461bcd60e51b81526004018080602001828103825260348152602001806141cc6034913960400191505060405180910390fd5b6000848410156128a05760405162461bcd60e51b81526004018080602001828103825260278152602001806142916027913960400191505060405180910390fd5b60008360058111156128ae57fe5b14156128be576107488585612cee565b60018360058111156128cc57fe5b14156128dc576107488585612de4565b60028360058111156128ea57fe5b14156128fa576107488585612e03565b600483600581111561290857fe5b1415612918576107488585612e1c565b600383600581111561292657fe5b141561293757610748858584612ebf565b600583600581111561294557fe5b14156129825760405162461bcd60e51b81526004018080602001828103825260398152602001806142276039913960400191505060405180910390fd5b60405162461bcd60e51b81526004018080602001828103825260358152602001806141446035913960400191505060405180910390fd5b60008282018183128015906129ce5750838112155b806129e357506000831280156129e357508381125b6105105760405162461bcd60e51b81526004018080602001828103825260218152602001806141ab6021913960400191505060405180910390fd5b600082612a2d57506000610436565b82820282848281612a3a57fe5b04146105105760405162461bcd60e51b81526004018080602001828103825260218152602001806142b86021913960400191505060405180910390fd5b6000808080612a8962015180876112be565b600c918801600019810183810494909401965094509250900660010191506000612ab38484611bb3565b905080821115612ac1578091505b62015180870662015180612ad6868686612f7d565b0201945086851015612ae757600080fd5b5050505092915050565b6000808080612b0362015180876112be565b9187019450925090506000612ab38484611bb3565b60008080612b2962015180856112be565b9196909550909350915050565b600062015180612b47858585612f7d565b02949350505050565b6000818303818312801590612b655750838113155b80612b7a5750600083128015612b7a57508381135b6105105760405162461bcd60e51b81526004018080602001828103825260248152602001806143266024913960400191505060405180910390fd5b600081831215611ab15750919050565b600081831315611ab15781610510565b6000808084602001516005811115612be957fe5b1415612c03578351612bfc90849061272d565b9050610510565b600184602001516005811115612c1557fe5b1415612c33578351612bfc90612c2c906007612a1e565b849061272d565b600284602001516005811115612c4557fe5b1415612c58578351612bfc908490612a77565b600384602001516005811115612c6a57fe5b1415612c88578351612bfc90612c81906003612a1e565b8490612a77565b600484602001516005811115612c9a57fe5b1415612cb1578351612bfc90612c81906006612a1e565b600584602001516005811115612cc357fe5b1415612cd6578351612bfc908490612af1565b60405162461bcd60e51b815260040161050790613f27565b600080612cfa84612ff9565b90506000612d0784612ff9565b90506000612d1486613011565b612d205761016d612d24565b61016e5b61ffff16905081831415612d5057612d4681612d40888861302e565b90613049565b9350505050610436565b6000612d5b86613011565b612d675761016d612d6b565b61016e5b61ffff1690506000612d9683612d408a612d91612d898a6001613181565b600180612b36565b61302e565b90506000612db383612d40612dad88600180612b36565b8b61302e565b9050612dd7612dcd6001612dc7888a6131db565b906131db565b611ee284846129b9565b9998505050505050505050565b6000610510610168612d4062015180612dfd86886131db565b9061321d565b600061051061016d612d4062015180612dfd86886131db565b6000806000806000806000612e3089612b18565b975095509350612e3f88612b18565b945092509050601f861415612e5357601e95505b82601f1415612e6157601e92505b6000612e6d8488612b50565b90506000612e7b8488612b50565b90506000612e898488612b50565b9050612eaf610168612d4085611ee2612ea387601e61325f565b611ee28761016861325f565b9c9b505050505050505050505050565b6000806000806000806000612ed38a612b18565b975095509350612ee289612b18565b945092509050612ef18a6112b1565b861415612efd57601e95505b8789148015612f0c5750816002145b158015612f205750612f1d896112b1565b83145b15612f2a57601e92505b6000612f368488612b50565b90506000612f448488612b50565b90506000612f528488612b50565b9050612f6c610168612d4085611ee2612ea387601e61325f565b9d9c50505050505050505050505050565b60006107b2841015612f8e57600080fd5b838383600062253d8c600460036064611324600c600d19890105890101050205600c80600d19870105600c02600287030361016f0281612fca57fe5b0560046105b5600c600d1989010589016112c0010205617d4b8603010103039050809450505050509392505050565b600061300862015180836112be565b50909392505050565b60008061302162015180846112be565b5050905061051081612757565b60008183111561303d57600080fd5b50620151809190030490565b6000816130875760405162461bcd60e51b815260040180806020018281038252602481526020018061434a6024913960400191505060405180910390fd5b8261309457506000610436565b670de0b6b3a7640000838102908482816130aa57fe5b05146130e75760405162461bcd60e51b81526004018080602001828103825260268152602001806143006026913960400191505060405180910390fd5b826000191480156130fb5750600160ff1b84145b156131375760405162461bcd60e51b81526004018080602001828103825260268152602001806143006026913960400191505060405180910390fd5b600083828161314257fe5b059050806106a95760405162461bcd60e51b81526004018080602001828103825260318152602001806142606031913960400191505060405180910390fd5b600082820183811015610510576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061051083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613308565b600061051083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061339f565b60008261326e57506000610436565b826000191480156132825750600160ff1b82145b156132be5760405162461bcd60e51b81526004018080602001828103825260278152602001806142d96027913960400191505060405180910390fd5b828202828482816132cb57fe5b05146105105760405162461bcd60e51b81526004018080602001828103825260278152602001806142d96027913960400191505060405180910390fd5b600081848411156133975760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561335c578181015183820152602001613344565b50505050905090810190601f1680156133895780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836133ee5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561335c578181015183820152602001613344565b5060008385816133fa57fe5b0495945050505050565b60405180610f0001604052806078906020820280368337509192915050565b604080516080810190915260008082526020820190815260200160008152600060209091015290565b604080516102e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610d2b57600080fd5b80358015158114610d2b57600080fd5b803560098110610d2b57600080fd5b8035610d2b81614119565b8035610d2b81614129565b8035600d8110610d2b57600080fd5b803560138110610d2b57600080fd5b803560228110610d2b57600080fd5b8035610d2b81614136565b600060808284031215613590578081fd5b6040516080810181811067ffffffffffffffff821117156135ad57fe5b6040528235815290508060208301356135c581614129565b602082015260408301356135d881614119565b60408201526135e960608401613512565b60608201525092915050565b600060608284031215613606578081fd5b6040516060810181811067ffffffffffffffff8211171561362357fe5b60405282358152905080602083013561363b81614129565b602082015261364c60408401613512565b60408201525092915050565b60006107a0828403121561366a578081fd5b50919050565b60006102e0828403121561366a578081fd5b600060208284031215613693578081fd5b610510826134fb565b6000602082840312156136ad578081fd5b61051082613512565b6000602082840312156136c7578081fd5b5035919050565b600080600080608085870312156136e3578283fd5b843593506136f360208601613522565b9250604085013561370381614119565b9396929550929360600135925050565b6000806000806000610da0868803121561372b578283fd5b8535945061373c8760208801613658565b935061374c876107c08801613670565b925061375b610aa08701613512565b915061376b87610ac08801613670565b90509295509295909350565b600060208284031215613788578081fd5b813561051081614119565b600080600060c084860312156137a7578081fd5b83356137b281614119565b9250602084013591506137c8856040860161357f565b90509250925092565b6000602082840312156137e2578081fd5b61051082613565565b600080604083850312156137fd578182fd5b61380683613565565b946020939093013593505050565b600060208284031215613825578081fd5b813561051081614136565b600060808284031215613841578081fd5b610510838361357f565b60006107a0828403121561385d578081fd5b6105108383613658565b6000806107c0838503121561387a578182fd5b6138848484613658565b946107a0939093013593505050565b600080600080610ac085870312156138a9578182fd5b6138b38686613658565b93506138c3866107a08701613670565b9396939550505050610a8082013591610aa0013590565b60008060006107e084860312156138ef578081fd5b6138f98585613658565b92506107a084013591506137c86107c08501613565565b60008060006107e08486031215613925578081fd5b61392f8585613658565b956107a085013595506107c0909401359392505050565b600080600080610800858703121561395c578182fd5b6139668686613658565b93506107a085013592506107c085013591506139856107e08601613565565b905092959194509250565b60006107a082840312156139a2578081fd5b6105a06139ae816140f5565b6139b784613556565b81526139c560208501613531565b60208201526139d660408501613547565b60408201526139e76060850161353c565b60608201526139f860808501613522565b6080820152613a0960a08501613531565b60a0820152613a1a60c08501613574565b60c0820152613a2b60e08501613574565b60e0820152610100613a3e818601613531565b90820152610120613a508582016134fb565b90820152610140613a628582016134fb565b90820152610160848101359082015261018080850135908201526101a080850135908201526101c080850135908201526101e08085013590820152610200808501359082015261022080850135908201526102408085013590820152610260808501359082015261028080850135908201526102a080850135908201526102c080850135908201526102e08085013590820152610300808501359082015261032080850135908201526103408085013590820152610360808501359082015261038080850135908201526103a080850135908201526103c080850135908201526103e08085013590820152610400808501359082015261042080850135908201526104408085013590820152610460808501359082015261048080850135908201526104a080850135908201526104c080850135908201526104e0613ba9868287016135f5565b90820152610540613bbc868683016135f5565b610500830152613bce8684870161357f565b610520830152613be286610620870161357f565b90820152613bf4856106a0860161357f565b610560820152613c0885610720860161357f565b610580820152949350505050565b60006102e0808385031215613c29578182fd5b613c32816140f5565b9050613c3d8361353c565b81526020838101359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e08084013590820152610200808401359082015261022080840135908201526102408084013590820152610260808401359082015261028080840135908201526102a080840135908201526102c0928301359281019290925250919050565b600080600080608085870312156136e3578182fd5b60068110613d5257fe5b9052565b6020808252825182820181905260009190848201906040850190845b81811015613d8e57835183529284019291840191600101613d72565b50909695505050505050565b901515815260200190565b90815260200190565b6020810160138310613dbc57fe5b91905290565b6020810160028310613dbc57fe5b6040810160228410613dde57fe5b9281526020015290565b6020808252602e908201527f5363686564756c652e636f6d70757465446174657346726f6d4379636c653a2060408201526d4d41585f4359434c455f53495a4560901b606082015260800190565b6020808252602e908201527f5363686564756c652e6765744e6578744379636c65446174653a20415454524960408201526d1095551157d393d517d193d5539160921b606082015260800190565b6020808252602d908201527f50414d456e67696e652e7061796f666646756e6374696f6e3a2041545452494260408201526c15551157d393d517d193d55391609a1b606082015260800190565b60208082526036908201527f50414d456e67696e652e73746174655472616e736974696f6e46756e6374696f6040820152751b8e8810551514925095551157d393d517d193d5539160521b606082015260800190565b60208082526037908201527f506572696f645574696c732e67657454696d657374616d70506c75735065726960408201527f6f643a204154545249425554455f4e4f545f464f554e44000000000000000000606082015260800190565b60208082526045908201527f456e644f664d6f6e7468436f6e76656e74696f6e2e61646a757374456e644f6660408201527f4d6f6e7468436f6e76656e74696f6e3a204154545249425554455f4e4f545f4660608201526427aaa7221760d91b608082015260a00190565b60006102e082019050614003828451613d48565b6020838101519083015260408084015190830152606080840151908301526080808401519083015260a0808401519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c092830151929091019190915290565b60405181810167ffffffffffffffff8111828210171561411157fe5b604052919050565b6002811061412657600080fd5b50565b6006811061412657600080fd5b6004811061412657600080fdfe446179436f756e74436f6e76656e74696f6e2e796561724672616374696f6e3a204154545249425554455f4e4f545f464f554e442e5369676e65644d6174682e666c6f61744d756c743a2043414e4e4f545f524550524553454e545f4752414e554c41524954595369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77436f6e7472616374526f6c65436f6e76656e74696f6e2e726f6c655369676e3a204154545249425554455f4e4f545f464f554e445369676e65644d6174682e666c6f61744d756c743a204f564552464c4f575f4445544543544544446179436f756e74436f6e76656e74696f6e2e796561724672616374696f6e3a204154545249425554455f4e4f545f535550504f525445442e5369676e65644d6174682e666c6f61744469763a2043414e4e4f545f524550524553454e545f4752414e554c4152495459436f72652e796561724672616374696f6e3a2053544152545f4e4f545f4245464f52455f454e44536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e65644d6174682e666c6f61744469763a204f564552464c4f575f44455445435445445369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775369676e65644d6174682e666c6f61744469763a20444956494445445f42595f5a45524fa26469706673582212202d3e09638904d71ffa7e4eaab022eda9f1c493a63ea15b41c012344f1056cc9164736f6c63430007040033",
  "devdoc": {
    "details": "All numbers except unix timestamp are represented as multiple of 10 ** 18",
    "kind": "dev",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "details": "The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \"M\" period unit or multiple thereof",
        "params": {
          "cycle": "the cycle struct",
          "eomc": "the end of month convention to adjust",
          "startTime": "timestamp of the cycle start"
        },
        "returns": {
          "_0": "the adjusted end of month convention"
        }
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "segmentEnd": "end timestamp of the segement",
          "segmentStart": "start timestamp of the segment",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "details": "For optimization reasons not located in EventUtil by applying the BDC specified in the terms"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "params": {
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the initial state of the contract"
        }
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "lastScheduleTime": "last occurrence of cyclic event",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "details": "Assumes that non-cyclic events of the same event type have a unique schedule time",
        "params": {
          "lastNonCyclicEvent": "last non-cyclic event",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "next non-cyclic event"
        }
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "params": {
          "segmentEnd": "end timestamp of the segement",
          "segmentStart": "start timestamp of the segment",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "segment of the non-cyclic schedule"
        }
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "params": {
          "_event": "event for which the payoff should be evaluated",
          "externalData": "external data needed for POF evaluation (e.g. fxRate)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the payoff of the event"
        }
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "params": {
          "_event": "event to be applied to the contract state",
          "externalData": "external data needed for STF evaluation (e.g. rate for RR events)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the resulting contract state"
        }
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "returns": {
          "_0": "boolean indicating whether event is still scheduled"
        }
      }
    },
    "title": "PAMEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "notice": "This function makes an adjustment on the end of month convention."
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "notice": "Returns the event time for a given schedule time"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "notice": "Initialize contract state space based on the contract terms."
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "notice": "Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured."
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "notice": "Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "notice": "Evaluates the payoff for an event under the current state of the contract."
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "notice": "Applys an event to the current state of a contract and returns the resulting contract state."
      },
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "notice": "Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract param state current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)"
      },
      "shiftCalcTime(uint256,uint8,uint8,uint256)": {
        "notice": "Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided."
      }
    },
    "notice": "Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a PAM contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}