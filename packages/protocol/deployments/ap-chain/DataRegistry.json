{
  "address": "0xf8a1BfCC2d1d5FaD14B04BE317bf84C272560a62",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "dataPoint",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PublishedDataPoint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "UpdatedDataProvider",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataPoint",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        }
      ],
      "name": "getDataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        }
      ],
      "name": "getLastUpdatedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "dataPoint",
          "type": "int256"
        }
      ],
      "name": "publishDataPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "setId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "setDataProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7f36813fb5128316f24d6c356d1476e4bcc1a4926f568945dd9f7630f132918",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xf8a1BfCC2d1d5FaD14B04BE317bf84C272560a62",
    "transactionIndex": 0,
    "gasUsed": "500818",
    "logsBloom": "0x00000008000000000000000000000000000000000000000000800000000100004000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000001000040000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xebf7280f5183e6d3a1b4ded37165e764c2835229b875cd7503e6cf87b92412b8",
    "transactionHash": "0xd7f36813fb5128316f24d6c356d1476e4bcc1a4926f568945dd9f7630f132918",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0xd7f36813fb5128316f24d6c356d1476e4bcc1a4926f568945dd9f7630f132918",
        "address": "0xf8a1BfCC2d1d5FaD14B04BE317bf84C272560a62",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c51ecf949882c2183357b860fd82dd4bb631840"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xebf7280f5183e6d3a1b4ded37165e764c2835229b875cd7503e6cf87b92412b8"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "500818",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "417ec0ef2bfb840a7e4ddf0b3f97612f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"dataPoint\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PublishedDataPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"UpdatedDataProvider\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataPoint\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"}],\"name\":\"getDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"}],\"name\":\"getLastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"dataPoint\",\"type\":\"int256\"}],\"name\":\"publishDataPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDataPoint(bytes32,uint256)\":{\"params\":{\"setId\":\"id of the data set\",\"timestamp\":\"timestamp of the data point\"},\"returns\":{\"_0\":\"data point, bool indicating whether data point exists\"}},\"getDataProvider(bytes32)\":{\"params\":{\"setId\":\"id of the data set\"},\"returns\":{\"_0\":\"address of provider\"}},\"getLastUpdatedTimestamp(bytes32)\":{\"params\":{\"setId\":\"id of the data set\"},\"returns\":{\"_0\":\"last updated timestamp\"}},\"isRegistered(bytes32)\":{\"params\":{\"setId\":\"setId of the data set\"},\"returns\":{\"_0\":\"true if market object exists\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publishDataPoint(bytes32,uint256,int256)\":{\"details\":\"Can only be called by a whitelisted data provider.\",\"params\":{\"dataPoint\":\"the data point of the data set\",\"setId\":\"id of the data set\",\"timestamp\":\"timestamp of the data point\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDataProvider(bytes32,address)\":{\"details\":\"Can only be called by the owner of the DataRegistry.\",\"params\":{\"provider\":\"address of the provider\",\"setId\":\"id of the data set\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DataRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDataPoint(bytes32,uint256)\":{\"notice\":\"Returns a data point of a market object for a given timestamp.\"},\"getDataProvider(bytes32)\":{\"notice\":\"Returns the provider for a market object\"},\"getLastUpdatedTimestamp(bytes32)\":{\"notice\":\"Returns the timestamp on which the last data point for a data set was submitted.\"},\"isRegistered(bytes32)\":{\"notice\":\"@notice Returns true if there is data registered for a given setId\"},\"publishDataPoint(bytes32,uint256,int256)\":{\"notice\":\"Stores a new data point of a data set for a given timestamp.\"},\"setDataProvider(bytes32,address)\":{\"notice\":\"Registers / updates a market object provider.\"}},\"notice\":\"Registry for data which is published by an registered MarketObjectProvider\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/Base/DataRegistry/DataRegistry.sol\":\"DataRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"contracts/Core/Base/DataRegistry/DataRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IDataRegistry.sol\\\";\\nimport \\\"./DataRegistryStorage.sol\\\";\\n\\n\\n/**\\n * @title DataRegistry\\n * @notice Registry for data which is published by an registered MarketObjectProvider\\n */\\ncontract DataRegistry is DataRegistryStorage, IDataRegistry, Ownable {\\n\\n    event UpdatedDataProvider(bytes32 indexed setId, address provider);\\n    event PublishedDataPoint(bytes32 indexed setId, int256 dataPoint, uint256 timestamp);\\n\\n\\n    /**\\n     * @notice @notice Returns true if there is data registered for a given setId\\n     * @param setId setId of the data set\\n     * @return true if market object exists\\n     */\\n    function isRegistered(bytes32 setId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return sets[setId].isSet;\\n    }\\n\\n    /**\\n     * @notice Returns a data point of a market object for a given timestamp.\\n     * @param setId id of the data set\\n     * @param timestamp timestamp of the data point\\n     * @return data point, bool indicating whether data point exists\\n     */\\n    function getDataPoint(\\n        bytes32 setId,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        override\\n        returns (int256, bool)\\n    {\\n        return (\\n            sets[setId].dataPoints[timestamp].dataPoint,\\n            sets[setId].dataPoints[timestamp].isSet\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the timestamp on which the last data point for a data set\\n     * was submitted.\\n     * @param setId id of the data set\\n     * @return last updated timestamp\\n     */\\n    function getLastUpdatedTimestamp(bytes32 setId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return sets[setId].lastUpdatedTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the provider for a market object\\n     * @param setId id of the data set\\n     * @return address of provider\\n     */\\n    function getDataProvider(bytes32 setId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return sets[setId].provider;\\n    }\\n\\n    /**\\n     * @notice Registers / updates a market object provider.\\n     * @dev Can only be called by the owner of the DataRegistry.\\n     * @param setId id of the data set\\n     * @param provider address of the provider\\n     */\\n    function setDataProvider(\\n        bytes32 setId,\\n        address provider\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        sets[setId].provider = provider;\\n\\n        if (sets[setId].isSet == false) {\\n            sets[setId].isSet = true;\\n        }\\n\\n        emit UpdatedDataProvider(setId, provider);\\n    }\\n\\n    /**\\n     * @notice Stores a new data point of a data set for a given timestamp.\\n     * @dev Can only be called by a whitelisted data provider.\\n     * @param setId id of the data set\\n     * @param timestamp timestamp of the data point\\n     * @param dataPoint the data point of the data set\\n     */\\n    function publishDataPoint(\\n        bytes32 setId,\\n        uint256 timestamp,\\n        int256 dataPoint\\n    )\\n        external\\n        override\\n    {\\n        require(\\n            msg.sender == sets[setId].provider,\\n            \\\"DataRegistry.publishDataPoint: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        sets[setId].dataPoints[timestamp] = DataPoint(dataPoint, true);\\n\\n        if (sets[setId].isSet == false) {\\n            sets[setId].isSet = true;\\n        }\\n\\n        if (sets[setId].lastUpdatedTimestamp < timestamp) {\\n            sets[setId].lastUpdatedTimestamp = timestamp;\\n        }\\n\\n        emit PublishedDataPoint(setId, dataPoint, timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x023b5ec754d61c25f21c7799770942b3eadac53c125f3d178881d9cba4e2b746\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/DataRegistry/DataRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title DataRegistryStorage\\n * @notice Describes the storage of the DataRegistry\\n */\\ncontract DataRegistryStorage {\\n\\n    struct DataPoint {\\n        int256 dataPoint;\\n        bool isSet;\\n    }\\n\\n    struct Set {\\n        // timestamp => DataPoint\\n        mapping(uint256 => DataPoint) dataPoints;\\n        uint256 lastUpdatedTimestamp;\\n        address provider;\\n        bool isSet;\\n    }\\n\\n    mapping(bytes32 => Set) internal sets;\\n}\",\"keccak256\":\"0x5535bb4ce528fa63d80a2162a5a3c35ace4f232d867e5d4ad355fff0a7166d74\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/DataRegistry/IDataRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./DataRegistryStorage.sol\\\";\\n\\n\\ninterface IDataRegistry {\\n\\n    function isRegistered(bytes32 setId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getLastUpdatedTimestamp(bytes32 setId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDataProvider(bytes32 setId)\\n        external\\n        view\\n        returns (address);\\n\\n    function setDataProvider(\\n        bytes32 setId,\\n        address provider\\n    )\\n        external;\\n\\n    function publishDataPoint(\\n        bytes32 setId,\\n        uint256 timestamp,\\n        int256 dataPoint\\n    )\\n        external;\\n\\n    function getDataPoint(\\n        bytes32 setId,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        returns (int256, bool);\\n}\\n\",\"keccak256\":\"0x0c4f892abfc38288383619f74c2d607f302b6bd76d05a74c2fad2f7e8b39c3fe\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006e565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610072565b3390565b6107a9806100816000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461010c578063af37897814610121578063d38db86d14610134578063ecef34f214610147578063f2fde38b1461015a57610093565b806308a4ec101461009857806327258b22146100c2578063715018a6146100e2578063816a7e01146100ec575b600080fd5b6100ab6100a6366004610669565b61016d565b6040516100b99291906106d4565b60405180910390f35b6100d56100d0366004610626565b610196565b6040516100b991906106c9565b6100ea6101b8565b005b6100ff6100fa366004610626565b61026c565b6040516100b99190610744565b610114610281565b6040516100b991906106b5565b6100ea61012f36600461063e565b610290565b6100ea61014236600461068a565b610393565b610114610155366004610626565b6104c1565b6100ea610168366004610605565b6104df565b60009182526020828152604080842092845291905290208054600190910154909160ff90911690565b600081815260208190526040902060020154600160a01b900460ff165b919050565b6101c06105ea565b6001546001600160a01b03908116911614610222576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b60009081526020819052604090206001015490565b6001546001600160a01b031690565b6102986105ea565b6001546001600160a01b039081169116146102fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600082815260208190526040902060020180546001600160a01b0319166001600160a01b0383161790819055600160a01b900460ff16610357576000828152602081905260409020600201805460ff60a01b1916600160a01b1790555b817f6d3523ac54f3703c06e93ef7e0e67f963e698a668616fbc72dafb71eb6bd30968260405161038791906106b5565b60405180910390a25050565b6000838152602081905260409020600201546001600160a01b031633146103d55760405162461bcd60e51b81526004016103cc906106f2565b60405180910390fd5b60408051808201825282815260016020808301828152600088815280835285812088825280845295812094518555905193909201805460ff19169315159390931790925585815290526002015460ff600160a01b90910416610454576000838152602081905260409020600201805460ff60a01b1916600160a01b1790555b6000838152602081905260409020600101548211156104825760008381526020819052604090206001018290555b827f183291f60aff981c3c2d6cb02edd75633d383a51f608e397789555ef0e77560282846040516104b49291906106e4565b60405180910390a2505050565b6000908152602081905260409020600201546001600160a01b031690565b6104e76105ea565b6001546001600160a01b03908116911614610549576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661058e5760405162461bcd60e51b815260040180806020018281038252602681526020018061074e6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b80356001600160a01b03811681146101b357600080fd5b600060208284031215610616578081fd5b61061f826105ee565b9392505050565b600060208284031215610637578081fd5b5035919050565b60008060408385031215610650578081fd5b82359150610660602084016105ee565b90509250929050565b6000806040838503121561067b578182fd5b50508035926020909101359150565b60008060006060848603121561069e578081fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b901515815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526032908201527f4461746152656769737472792e7075626c69736844617461506f696e743a20556040820152712720aaaa2427a924ad22a22fa9a2a72222a960711b606082015260800190565b9081526020019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205d42a424bbf0e5ce92961ab83ec5f942962467fdab31e3df1a7b039f5c7a022a64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461010c578063af37897814610121578063d38db86d14610134578063ecef34f214610147578063f2fde38b1461015a57610093565b806308a4ec101461009857806327258b22146100c2578063715018a6146100e2578063816a7e01146100ec575b600080fd5b6100ab6100a6366004610669565b61016d565b6040516100b99291906106d4565b60405180910390f35b6100d56100d0366004610626565b610196565b6040516100b991906106c9565b6100ea6101b8565b005b6100ff6100fa366004610626565b61026c565b6040516100b99190610744565b610114610281565b6040516100b991906106b5565b6100ea61012f36600461063e565b610290565b6100ea61014236600461068a565b610393565b610114610155366004610626565b6104c1565b6100ea610168366004610605565b6104df565b60009182526020828152604080842092845291905290208054600190910154909160ff90911690565b600081815260208190526040902060020154600160a01b900460ff165b919050565b6101c06105ea565b6001546001600160a01b03908116911614610222576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b60009081526020819052604090206001015490565b6001546001600160a01b031690565b6102986105ea565b6001546001600160a01b039081169116146102fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600082815260208190526040902060020180546001600160a01b0319166001600160a01b0383161790819055600160a01b900460ff16610357576000828152602081905260409020600201805460ff60a01b1916600160a01b1790555b817f6d3523ac54f3703c06e93ef7e0e67f963e698a668616fbc72dafb71eb6bd30968260405161038791906106b5565b60405180910390a25050565b6000838152602081905260409020600201546001600160a01b031633146103d55760405162461bcd60e51b81526004016103cc906106f2565b60405180910390fd5b60408051808201825282815260016020808301828152600088815280835285812088825280845295812094518555905193909201805460ff19169315159390931790925585815290526002015460ff600160a01b90910416610454576000838152602081905260409020600201805460ff60a01b1916600160a01b1790555b6000838152602081905260409020600101548211156104825760008381526020819052604090206001018290555b827f183291f60aff981c3c2d6cb02edd75633d383a51f608e397789555ef0e77560282846040516104b49291906106e4565b60405180910390a2505050565b6000908152602081905260409020600201546001600160a01b031690565b6104e76105ea565b6001546001600160a01b03908116911614610549576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661058e5760405162461bcd60e51b815260040180806020018281038252602681526020018061074e6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b80356001600160a01b03811681146101b357600080fd5b600060208284031215610616578081fd5b61061f826105ee565b9392505050565b600060208284031215610637578081fd5b5035919050565b60008060408385031215610650578081fd5b82359150610660602084016105ee565b90509250929050565b6000806040838503121561067b578182fd5b50508035926020909101359150565b60008060006060848603121561069e578081fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b901515815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526032908201527f4461746152656769737472792e7075626c69736844617461506f696e743a20556040820152712720aaaa2427a924ad22a22fa9a2a72222a960711b606082015260800190565b9081526020019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205d42a424bbf0e5ce92961ab83ec5f942962467fdab31e3df1a7b039f5c7a022a64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getDataPoint(bytes32,uint256)": {
        "params": {
          "setId": "id of the data set",
          "timestamp": "timestamp of the data point"
        },
        "returns": {
          "_0": "data point, bool indicating whether data point exists"
        }
      },
      "getDataProvider(bytes32)": {
        "params": {
          "setId": "id of the data set"
        },
        "returns": {
          "_0": "address of provider"
        }
      },
      "getLastUpdatedTimestamp(bytes32)": {
        "params": {
          "setId": "id of the data set"
        },
        "returns": {
          "_0": "last updated timestamp"
        }
      },
      "isRegistered(bytes32)": {
        "params": {
          "setId": "setId of the data set"
        },
        "returns": {
          "_0": "true if market object exists"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publishDataPoint(bytes32,uint256,int256)": {
        "details": "Can only be called by a whitelisted data provider.",
        "params": {
          "dataPoint": "the data point of the data set",
          "setId": "id of the data set",
          "timestamp": "timestamp of the data point"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDataProvider(bytes32,address)": {
        "details": "Can only be called by the owner of the DataRegistry.",
        "params": {
          "provider": "address of the provider",
          "setId": "id of the data set"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DataRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDataPoint(bytes32,uint256)": {
        "notice": "Returns a data point of a market object for a given timestamp."
      },
      "getDataProvider(bytes32)": {
        "notice": "Returns the provider for a market object"
      },
      "getLastUpdatedTimestamp(bytes32)": {
        "notice": "Returns the timestamp on which the last data point for a data set was submitted."
      },
      "isRegistered(bytes32)": {
        "notice": "@notice Returns true if there is data registered for a given setId"
      },
      "publishDataPoint(bytes32,uint256,int256)": {
        "notice": "Stores a new data point of a data set for a given timestamp."
      },
      "setDataProvider(bytes32,address)": {
        "notice": "Registers / updates a market object provider."
      }
    },
    "notice": "Registry for data which is published by an registered MarketObjectProvider",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26774,
        "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
        "label": "sets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Set)26770_storage)"
      },
      {
        "astId": 30,
        "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Set)26770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataRegistryStorage.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)26770_storage"
      },
      "t_mapping(t_uint256,t_struct(DataPoint)26759_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataRegistryStorage.DataPoint)",
        "numberOfBytes": "32",
        "value": "t_struct(DataPoint)26759_storage"
      },
      "t_struct(DataPoint)26759_storage": {
        "encoding": "inplace",
        "label": "struct DataRegistryStorage.DataPoint",
        "members": [
          {
            "astId": 26756,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "dataPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 26758,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "isSet",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)26770_storage": {
        "encoding": "inplace",
        "label": "struct DataRegistryStorage.Set",
        "members": [
          {
            "astId": 26763,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "dataPoints",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(DataPoint)26759_storage)"
          },
          {
            "astId": 26765,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "lastUpdatedTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26767,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "provider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 26769,
            "contract": "contracts/Core/Base/DataRegistry/DataRegistry.sol:DataRegistry",
            "label": "isSet",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}