/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class OpenOraclePriceData extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): OpenOraclePriceData;
  methods: {
    get(
      source: string,
      key: string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    getPrice(source: string, key: string): TransactionObject<string>;

    put(
      message: string | number[],
      signature: string | number[]
    ): TransactionObject<string>;

    source(
      message: string | number[],
      signature: string | number[]
    ): TransactionObject<string>;
  };
  events: {
    NotWritten: ContractEvent<{
      priorTimestamp: string;
      messageTimestamp: string;
      blockTimestamp: string;
      0: string;
      1: string;
      2: string;
    }>;
    Write: ContractEvent<{
      source: string;
      key: string;
      timestamp: string;
      value: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
