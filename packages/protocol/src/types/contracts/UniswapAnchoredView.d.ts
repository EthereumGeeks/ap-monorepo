/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class UniswapAnchoredView extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): UniswapAnchoredView;
  methods: {
    anchorPeriod(): TransactionObject<string>;

    ethBaseUnit(): TransactionObject<string>;

    expScale(): TransactionObject<string>;

    getTokenConfig(
      i: number | string
    ): TransactionObject<{
      cToken: string;
      underlying: string;
      symbolHash: string;
      baseUnit: string;
      priceSource: string;
      fixedPrice: string;
      uniswapMarket: string;
      isUniswapReversed: boolean;
    }>;

    getTokenConfigByCToken(
      cToken: string
    ): TransactionObject<{
      cToken: string;
      underlying: string;
      symbolHash: string;
      baseUnit: string;
      priceSource: string;
      fixedPrice: string;
      uniswapMarket: string;
      isUniswapReversed: boolean;
    }>;

    getTokenConfigBySymbol(
      symbol: string
    ): TransactionObject<{
      cToken: string;
      underlying: string;
      symbolHash: string;
      baseUnit: string;
      priceSource: string;
      fixedPrice: string;
      uniswapMarket: string;
      isUniswapReversed: boolean;
    }>;

    getTokenConfigBySymbolHash(
      symbolHash: string | number[]
    ): TransactionObject<{
      cToken: string;
      underlying: string;
      symbolHash: string;
      baseUnit: string;
      priceSource: string;
      fixedPrice: string;
      uniswapMarket: string;
      isUniswapReversed: boolean;
    }>;

    getTokenConfigByUnderlying(
      underlying: string
    ): TransactionObject<{
      cToken: string;
      underlying: string;
      symbolHash: string;
      baseUnit: string;
      priceSource: string;
      fixedPrice: string;
      uniswapMarket: string;
      isUniswapReversed: boolean;
    }>;

    getUnderlyingPrice(cToken: string): TransactionObject<string>;

    invalidateReporter(
      message: string | number[],
      signature: string | number[]
    ): TransactionObject<void>;

    lowerBoundAnchorRatio(): TransactionObject<string>;

    maxTokens(): TransactionObject<string>;

    newObservations(
      arg0: string | number[]
    ): TransactionObject<{
      timestamp: string;
      acc: string;
      0: string;
      1: string;
    }>;

    numTokens(): TransactionObject<string>;

    oldObservations(
      arg0: string | number[]
    ): TransactionObject<{
      timestamp: string;
      acc: string;
      0: string;
      1: string;
    }>;

    postPrices(
      messages: (string | number[])[],
      signatures: (string | number[])[],
      symbols: string[]
    ): TransactionObject<void>;

    price(symbol: string): TransactionObject<string>;

    priceData(): TransactionObject<string>;

    prices(arg0: string | number[]): TransactionObject<string>;

    reporter(): TransactionObject<string>;

    reporterInvalidated(): TransactionObject<boolean>;

    source(
      message: string | number[],
      signature: string | number[]
    ): TransactionObject<string>;

    upperBoundAnchorRatio(): TransactionObject<string>;
  };
  events: {
    AnchorPriceUpdated: ContractEvent<{
      symbol: string;
      anchorPrice: string;
      oldTimestamp: string;
      newTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    PriceGuarded: ContractEvent<{
      symbol: string;
      reporter: string;
      anchor: string;
      0: string;
      1: string;
      2: string;
    }>;
    PriceUpdated: ContractEvent<{
      symbol: string;
      price: string;
      0: string;
      1: string;
    }>;
    ReporterInvalidated: ContractEvent<string>;
    UniswapWindowUpdated: ContractEvent<{
      symbolHash: string;
      oldTimestamp: string;
      newTimestamp: string;
      oldPrice: string;
      newPrice: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
