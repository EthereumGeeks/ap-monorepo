/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class Deposit extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): Deposit;
  methods: {
    MAX_CYCLE_SIZE(): TransactionObject<string>;

    MAX_EVENT_SCHEDULE_SIZE(): TransactionObject<string>;

    ONE_POINT_ZERO(): TransactionObject<string>;

    PRECISION(): TransactionObject<string>;

    allowance(owner: string, spender: string): TransactionObject<string>;

    approve(
      spender: string,
      amount: number | string
    ): TransactionObject<boolean>;

    balanceOf(account: string): TransactionObject<string>;

    balanceOfAt(
      holder: string,
      timestamp: number | string
    ): TransactionObject<string>;

    computeEventTimeForEvent(
      _event: string | number[],
      terms: {
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        scalingEffect: number | string;
        penaltyType: number | string;
        feeBasis: number | string;
        creditEventTypeCovered: number | string;
        currency: string;
        settlementCurrency: string;
        marketObjectCodeRateReset: string | number[];
        statusDate: number | string;
        maturityDate: number | string;
        notionalPrincipal: number | string;
        nominalInterestRate: number | string;
        feeAccrued: number | string;
        accruedInterest: number | string;
        rateMultiplier: number | string;
        rateSpread: number | string;
        feeRate: number | string;
        nextResetRate: number | string;
        penaltyRate: number | string;
        premiumDiscountAtIED: number | string;
        priceAtPurchaseDate: number | string;
        nextPrincipalRedemptionPayment: number | string;
        coverageOfCreditEnhancement: number | string;
        lifeCap: number | string;
        lifeFloor: number | string;
        periodCap: number | string;
        periodFloor: number | string;
        gracePeriod: { i: number | string; p: number | string; isSet: boolean };
        delinquencyPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        contractReference_1: {
          object: string | number[];
          _type: number | string;
          role: number | string;
        };
        contractReference_2: {
          object: string | number[];
          _type: number | string;
          role: number | string;
        };
      }
    ): TransactionObject<string>;

    decodeEvent(
      _event: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string
    ): TransactionObject<boolean>;

    depositForEvent(
      arg0: string | number[]
    ): TransactionObject<{
      created: string;
      amount: string;
      claimedAmount: string;
      totalBalanceOfWhitelistedHolders: string;
      isRestrictedDeposit: boolean;
      token: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
      5: string;
    }>;

    encodeEvent(
      eventType: number | string,
      scheduleTime: number | string
    ): TransactionObject<string>;

    getEpochOffset(eventType: number | string): TransactionObject<string>;

    getHolderSubsetAt(
      checkpointId: number | string,
      start: number | string,
      end: number | string
    ): TransactionObject<string[]>;

    getHoldersAt(checkpointId: number | string): TransactionObject<string[]>;

    getNumberOfHolders(): TransactionObject<string>;

    holderCount(): TransactionObject<string>;

    increaseAllowance(
      spender: string,
      addedValue: number | string
    ): TransactionObject<boolean>;

    totalSupply(): TransactionObject<string>;

    totalSupplyAt(timestamp: number | string): TransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;

    createDepositForEvent(_event: string | number[]): TransactionObject<void>;

    updateDepositAmountForEvent(
      _event: string | number[]
    ): TransactionObject<void>;

    pushFundsToAddresses(
      _event: string | number[],
      payees: string[]
    ): TransactionObject<void>;

    claimDepositForEvent(_event: string | number[]): TransactionObject<void>;

    calculateClaimOnDepositForEvent(
      payee: string,
      _event: string | number[]
    ): TransactionObject<string>;

    getDepositForEvent(
      _event: string | number[]
    ): TransactionObject<{
      created: string;
      amount: string;
      claimedAmount: string;
      totalBalanceOfWhitelistedHolders: string;
      isRestrictedDeposit: boolean;
      token: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
      5: string;
    }>;

    hasClaimedDepositForEvent(
      holder: string,
      _event: string | number[]
    ): TransactionObject<boolean>;
  };
  events: {
    Approval: ContractEvent<{
      owner: string;
      spender: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    CheckpointCreated: ContractEvent<string>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
